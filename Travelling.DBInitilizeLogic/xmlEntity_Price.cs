//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;
using Price.www.opentravel.org.OTA.Item2003.Item05;


namespace Price
{
    /// <summary>
    /// <para>
    /// Regular expression: (BookingRules | TPA_Extensions | Description | Header | HotelResponse)*
    /// </para>
    /// </summary>
    public partial class Response : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<www.opentravel.org.OTA.Item2003.Item05.BookingRules> BookingRulesField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions> TPA_ExtensionsField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<www.opentravel.org.OTA.Item2003.Item05.Description> DescriptionField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HeaderLocalType> HeaderField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HotelResponseLocalType> HotelResponseField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        public static explicit operator Response(XElement xe) { return XTypedServices.ToXTypedElement<Response>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static Response()
        {
            BuildElementDictionary();
        }

        /// <summary>
        /// <para>
        /// Regular expression: (BookingRules | TPA_Extensions | Description | Header | HotelResponse)*
        /// </para>
        /// </summary>
        public Response()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (BookingRules | TPA_Extensions | Description | Header | HotelResponse)*
        /// </para>
        /// </summary>
        public IList<www.opentravel.org.OTA.Item2003.Item05.BookingRules> BookingRules
        {
            get
            {
                if ((this.BookingRulesField == null))
                {
                    this.BookingRulesField = new XTypedList<www.opentravel.org.OTA.Item2003.Item05.BookingRules>(this, LinqToXsdTypeManager.Instance, XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"));
                }
                return this.BookingRulesField;
            }
            set
            {
                if ((value == null))
                {
                    this.BookingRulesField = null;
                }
                else
                {
                    if ((this.BookingRulesField == null))
                    {
                        this.BookingRulesField = XTypedList<www.opentravel.org.OTA.Item2003.Item05.BookingRules>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    else
                    {
                        XTypedServices.SetList<www.opentravel.org.OTA.Item2003.Item05.BookingRules>(this.BookingRulesField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (BookingRules | TPA_Extensions | Description | Header | HotelResponse)*
        /// </para>
        /// </summary>
        public IList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions> TPA_Extensions
        {
            get
            {
                if ((this.TPA_ExtensionsField == null))
                {
                    this.TPA_ExtensionsField = new XTypedList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                }
                return this.TPA_ExtensionsField;
            }
            set
            {
                if ((value == null))
                {
                    this.TPA_ExtensionsField = null;
                }
                else
                {
                    if ((this.TPA_ExtensionsField == null))
                    {
                        this.TPA_ExtensionsField = XTypedList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    else
                    {
                        XTypedServices.SetList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions>(this.TPA_ExtensionsField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (BookingRules | TPA_Extensions | Description | Header | HotelResponse)*
        /// </para>
        /// </summary>
        public IList<www.opentravel.org.OTA.Item2003.Item05.Description> Description
        {
            get
            {
                if ((this.DescriptionField == null))
                {
                    this.DescriptionField = new XTypedList<www.opentravel.org.OTA.Item2003.Item05.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                }
                return this.DescriptionField;
            }
            set
            {
                if ((value == null))
                {
                    this.DescriptionField = null;
                }
                else
                {
                    if ((this.DescriptionField == null))
                    {
                        this.DescriptionField = XTypedList<www.opentravel.org.OTA.Item2003.Item05.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    else
                    {
                        XTypedServices.SetList<www.opentravel.org.OTA.Item2003.Item05.Description>(this.DescriptionField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (BookingRules | TPA_Extensions | Description | Header | HotelResponse)*
        /// </para>
        /// </summary>
        public IList<Response.HeaderLocalType> Header
        {
            get
            {
                if ((this.HeaderField == null))
                {
                    this.HeaderField = new XTypedList<HeaderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Header", ""));
                }
                return this.HeaderField;
            }
            set
            {
                if ((value == null))
                {
                    this.HeaderField = null;
                }
                else
                {
                    if ((this.HeaderField == null))
                    {
                        this.HeaderField = XTypedList<HeaderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Header", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<HeaderLocalType>(this.HeaderField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (BookingRules | TPA_Extensions | Description | Header | HotelResponse)*
        /// </para>
        /// </summary>
        public IList<Response.HotelResponseLocalType> HotelResponse
        {
            get
            {
                if ((this.HotelResponseField == null))
                {
                    this.HotelResponseField = new XTypedList<HotelResponseLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("HotelResponse", ""));
                }
                return this.HotelResponseField;
            }
            set
            {
                if ((value == null))
                {
                    this.HotelResponseField = null;
                }
                else
                {
                    if ((this.HotelResponseField == null))
                    {
                        this.HotelResponseField = XTypedList<HotelResponseLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HotelResponse", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<HotelResponseLocalType>(this.HotelResponseField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("Response", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Response Load(string xmlFile)
        {
            return XTypedServices.Load<Response>(xmlFile);
        }

        public static Response Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Response>(xmlFile);
        }

        public static Response Parse(string xml)
        {
            return XTypedServices.Parse<Response>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Response>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"), typeof(www.opentravel.org.OTA.Item2003.Item05.BookingRules));
            localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions));
            localElementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(www.opentravel.org.OTA.Item2003.Item05.Description));
            localElementDictionary.Add(XName.Get("Header", ""), typeof(HeaderLocalType));
            localElementDictionary.Add(XName.Get("HotelResponse", ""), typeof(HotelResponseLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        public partial class HeaderLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator HeaderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HeaderLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public HeaderLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string ShouldRecordPerformanceTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ShouldRecordPerformanceTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ShouldRecordPerformanceTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Timestamp
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("Timestamp", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("Timestamp", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string ReferenceID
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ReferenceID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ReferenceID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string RecentlyTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("RecentlyTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("RecentlyTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string AccessCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("AccessCount", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("AccessCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string CurrentCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("CurrentCount", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("CurrentCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string ResetTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ResetTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ResetTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string ResultCode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ResultCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ResultCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Header", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<HeaderLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (OTA_HotelRatePlanRS)
        /// </para>
        /// </summary>
        public partial class HotelResponseLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator HotelResponseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HotelResponseLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static HotelResponseLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OTA_HotelRatePlanRS", "http://www.opentravel.org/OTA/2003/05")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (OTA_HotelRatePlanRS)
            /// </para>
            /// </summary>
            public HotelResponseLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (OTA_HotelRatePlanRS)
            /// </para>
            /// </summary>
            public www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS OTA_HotelRatePlanRS
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("OTA_HotelRatePlanRS", "http://www.opentravel.org/OTA/2003/05"));
                    return ((www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS)(x));
                }
                set
                {
                    this.SetElement(XName.Get("OTA_HotelRatePlanRS", "http://www.opentravel.org/OTA/2003/05"), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("HotelResponse", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<HotelResponseLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("OTA_HotelRatePlanRS", "http://www.opentravel.org/OTA/2003/05"), typeof(www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("Response", ""), typeof(Price.Response));
            elementDictionary.Add(XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"), typeof(Price.www.opentravel.org.OTA.Item2003.Item05.BookingRules));
            elementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(Price.www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions));
            elementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(Price.www.opentravel.org.OTA.Item2003.Item05.Description));
            elementDictionary.Add(XName.Get("OTA_HotelRatePlanRS", "http://www.opentravel.org/OTA/2003/05"), typeof(Price.www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("Response", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public Response Response { get { return rootObject as Response; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(Response root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public Response Response { get { return rootObject as Response; } }

        public Price.www.opentravel.org.OTA.Item2003.Item05.BookingRules BookingRules { get { return rootObject as Price.www.opentravel.org.OTA.Item2003.Item05.BookingRules; } }

        public Price.www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions TPA_Extensions { get { return rootObject as Price.www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions; } }

        public Price.www.opentravel.org.OTA.Item2003.Item05.Description Description { get { return rootObject as Price.www.opentravel.org.OTA.Item2003.Item05.Description; } }

        public Price.www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS OTA_HotelRatePlanRS { get { return rootObject as Price.www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS; } }

        private XRoot()
        {
        }

        public XRoot(Response root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Price.www.opentravel.org.OTA.Item2003.Item05.BookingRules root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Price.www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Price.www.opentravel.org.OTA.Item2003.Item05.Description root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Price.www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
    namespace www.opentravel.org.OTA.Item2003.Item05
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        /// <summary>
        /// <para>
        /// Regular expression: (BookingRule*)
        /// </para>
        /// </summary>
        public partial class BookingRules : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<BookingRuleLocalType> BookingRuleField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator BookingRules(XElement xe) { return XTypedServices.ToXTypedElement<BookingRules>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static BookingRules()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("BookingRule", "http://www.opentravel.org/OTA/2003/05")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (BookingRule*)
            /// </para>
            /// </summary>
            public BookingRules()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (BookingRule*)
            /// </para>
            /// </summary>
            public IList<www.opentravel.org.OTA.Item2003.Item05.BookingRules.BookingRuleLocalType> BookingRule
            {
                get
                {
                    if ((this.BookingRuleField == null))
                    {
                        this.BookingRuleField = new XTypedList<BookingRuleLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("BookingRule", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    return this.BookingRuleField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.BookingRuleField = null;
                    }
                    else
                    {
                        if ((this.BookingRuleField == null))
                        {
                            this.BookingRuleField = XTypedList<BookingRuleLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BookingRule", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        else
                        {
                            XTypedServices.SetList<BookingRuleLocalType>(this.BookingRuleField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static BookingRules Load(string xmlFile)
            {
                return XTypedServices.Load<BookingRules>(xmlFile);
            }

            public static BookingRules Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<BookingRules>(xmlFile);
            }

            public static BookingRules Parse(string xml)
            {
                return XTypedServices.Parse<BookingRules>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<BookingRules>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("BookingRule", "http://www.opentravel.org/OTA/2003/05"), typeof(BookingRuleLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Viewerships*, LengthsOfStay*)
            /// </para>
            /// </summary>
            public partial class BookingRuleLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<ViewershipsLocalType> ViewershipsField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<LengthsOfStayLocalType> LengthsOfStayField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator BookingRuleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BookingRuleLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static BookingRuleLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Viewerships", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("LengthsOfStay", "http://www.opentravel.org/OTA/2003/05")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Viewerships*, LengthsOfStay*)
                /// </para>
                /// </summary>
                public BookingRuleLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Viewerships*, LengthsOfStay*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.BookingRules.BookingRuleLocalType.ViewershipsLocalType> Viewerships
                {
                    get
                    {
                        if ((this.ViewershipsField == null))
                        {
                            this.ViewershipsField = new XTypedList<ViewershipsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Viewerships", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.ViewershipsField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.ViewershipsField = null;
                        }
                        else
                        {
                            if ((this.ViewershipsField == null))
                            {
                                this.ViewershipsField = XTypedList<ViewershipsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Viewerships", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else
                            {
                                XTypedServices.SetList<ViewershipsLocalType>(this.ViewershipsField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Viewerships*, LengthsOfStay*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.BookingRules.BookingRuleLocalType.LengthsOfStayLocalType> LengthsOfStay
                {
                    get
                    {
                        if ((this.LengthsOfStayField == null))
                        {
                            this.LengthsOfStayField = new XTypedList<LengthsOfStayLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("LengthsOfStay", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.LengthsOfStayField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.LengthsOfStayField = null;
                        }
                        else
                        {
                            if ((this.LengthsOfStayField == null))
                            {
                                this.LengthsOfStayField = XTypedList<LengthsOfStayLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LengthsOfStay", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else
                            {
                                XTypedServices.SetList<LengthsOfStayLocalType>(this.LengthsOfStayField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string MinAdvancedBookingOffset
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("MinAdvancedBookingOffset", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("MinAdvancedBookingOffset", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string LaterReserveTime
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("LaterReserveTime", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("LaterReserveTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("BookingRule", "http://www.opentravel.org/OTA/2003/05");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<BookingRuleLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("Viewerships", "http://www.opentravel.org/OTA/2003/05"), typeof(ViewershipsLocalType));
                    localElementDictionary.Add(XName.Get("LengthsOfStay", "http://www.opentravel.org/OTA/2003/05"), typeof(LengthsOfStayLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Viewership*)
                /// </para>
                /// </summary>
                public partial class ViewershipsLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<ViewershipLocalType> ViewershipField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ViewershipsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ViewershipsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ViewershipsLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Viewership", "http://www.opentravel.org/OTA/2003/05")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Viewership*)
                    /// </para>
                    /// </summary>
                    public ViewershipsLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (Viewership*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.BookingRules.BookingRuleLocalType.ViewershipsLocalType.ViewershipLocalType> Viewership
                    {
                        get
                        {
                            if ((this.ViewershipField == null))
                            {
                                this.ViewershipField = new XTypedList<ViewershipLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Viewership", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.ViewershipField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.ViewershipField = null;
                            }
                            else
                            {
                                if ((this.ViewershipField == null))
                                {
                                    this.ViewershipField = XTypedList<ViewershipLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Viewership", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else
                                {
                                    XTypedServices.SetList<ViewershipLocalType>(this.ViewershipField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("Viewerships", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ViewershipsLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("Viewership", "http://www.opentravel.org/OTA/2003/05"), typeof(ViewershipLocalType));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Profiles*)
                    /// </para>
                    /// </summary>
                    public partial class ViewershipLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<ProfilesLocalType> ProfilesField;

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator ViewershipLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ViewershipLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static ViewershipLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Profiles", "http://www.opentravel.org/OTA/2003/05")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Profiles*)
                        /// </para>
                        /// </summary>
                        public ViewershipLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (Profiles*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.BookingRules.BookingRuleLocalType.ViewershipsLocalType.ViewershipLocalType.ProfilesLocalType> Profiles
                        {
                            get
                            {
                                if ((this.ProfilesField == null))
                                {
                                    this.ProfilesField = new XTypedList<ProfilesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Profiles", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.ProfilesField;
                            }
                            set
                            {
                                if ((value == null))
                                {
                                    this.ProfilesField = null;
                                }
                                else
                                {
                                    if ((this.ProfilesField == null))
                                    {
                                        this.ProfilesField = XTypedList<ProfilesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Profiles", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else
                                    {
                                        XTypedServices.SetList<ProfilesLocalType>(this.ProfilesField, value);
                                    }
                                }
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("Viewership", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<ViewershipLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("Profiles", "http://www.opentravel.org/OTA/2003/05"), typeof(ProfilesLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Profile*)
                        /// </para>
                        /// </summary>
                        public partial class ProfilesLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<ProfileLocalType> ProfileField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator ProfilesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ProfilesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static ProfilesLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Profile", "http://www.opentravel.org/OTA/2003/05")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Profile*)
                            /// </para>
                            /// </summary>
                            public ProfilesLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (Profile*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.BookingRules.BookingRuleLocalType.ViewershipsLocalType.ViewershipLocalType.ProfilesLocalType.ProfileLocalType> Profile
                            {
                                get
                                {
                                    if ((this.ProfileField == null))
                                    {
                                        this.ProfileField = new XTypedList<ProfileLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Profile", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.ProfileField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.ProfileField = null;
                                    }
                                    else
                                    {
                                        if ((this.ProfileField == null))
                                        {
                                            this.ProfileField = XTypedList<ProfileLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Profile", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<ProfileLocalType>(this.ProfileField, value);
                                        }
                                    }
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("Profiles", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<ProfilesLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Profile", "http://www.opentravel.org/OTA/2003/05"), typeof(ProfileLocalType));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Customer*)
                            /// </para>
                            /// </summary>
                            public partial class ProfileLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<CustomerLocalType> CustomerField;

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator ProfileLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ProfileLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static ProfileLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Customer", "http://www.opentravel.org/OTA/2003/05")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Customer*)
                                /// </para>
                                /// </summary>
                                public ProfileLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (Customer*)
                                /// </para>
                                /// </summary>
                                public IList<www.opentravel.org.OTA.Item2003.Item05.BookingRules.BookingRuleLocalType.ViewershipsLocalType.ViewershipLocalType.ProfilesLocalType.ProfileLocalType.CustomerLocalType> Customer
                                {
                                    get
                                    {
                                        if ((this.CustomerField == null))
                                        {
                                            this.CustomerField = new XTypedList<CustomerLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Customer", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.CustomerField;
                                    }
                                    set
                                    {
                                        if ((value == null))
                                        {
                                            this.CustomerField = null;
                                        }
                                        else
                                        {
                                            if ((this.CustomerField == null))
                                            {
                                                this.CustomerField = XTypedList<CustomerLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Customer", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else
                                            {
                                                XTypedServices.SetList<CustomerLocalType>(this.CustomerField, value);
                                            }
                                        }
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("Profile", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<ProfileLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("Customer", "http://www.opentravel.org/OTA/2003/05"), typeof(CustomerLocalType));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }

                                public partial class CustomerLocalType : XTypedElement, IXMetaData
                                {

                                    public static explicit operator CustomerLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CustomerLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                    public CustomerLocalType()
                                    {
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string CustomerValue
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("CustomerValue", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("CustomerValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName
                                    {
                                        get
                                        {
                                            return XName.Get("Customer", "http://www.opentravel.org/OTA/2003/05");
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin
                                    {
                                        get
                                        {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager
                                    {
                                        get
                                        {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }

                                    public override XTypedElement Clone()
                                    {
                                        return XTypedServices.CloneXTypedElement<CustomerLocalType>(this);
                                    }

                                    ContentModelEntity IXMetaData.GetContentModel()
                                    {
                                        return ContentModelEntity.Default;
                                    }
                                }
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LengthOfStay*)
                /// </para>
                /// </summary>
                public partial class LengthsOfStayLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<LengthOfStayLocalType> LengthOfStayField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator LengthsOfStayLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LengthsOfStayLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static LengthsOfStayLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LengthOfStay", "http://www.opentravel.org/OTA/2003/05")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (LengthOfStay*)
                    /// </para>
                    /// </summary>
                    public LengthsOfStayLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (LengthOfStay*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.BookingRules.BookingRuleLocalType.LengthsOfStayLocalType.LengthOfStayLocalType> LengthOfStay
                    {
                        get
                        {
                            if ((this.LengthOfStayField == null))
                            {
                                this.LengthOfStayField = new XTypedList<LengthOfStayLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("LengthOfStay", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.LengthOfStayField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.LengthOfStayField = null;
                            }
                            else
                            {
                                if ((this.LengthOfStayField == null))
                                {
                                    this.LengthOfStayField = XTypedList<LengthOfStayLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LengthOfStay", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else
                                {
                                    XTypedServices.SetList<LengthOfStayLocalType>(this.LengthOfStayField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("LengthsOfStay", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<LengthsOfStayLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("LengthOfStay", "http://www.opentravel.org/OTA/2003/05"), typeof(LengthOfStayLocalType));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    public partial class LengthOfStayLocalType : XTypedElement, IXMetaData
                    {

                        public static explicit operator LengthOfStayLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LengthOfStayLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        public LengthOfStayLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string Time
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("Time", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("Time", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("LengthOfStay", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<LengthOfStayLocalType>(this);
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return ContentModelEntity.Default;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (PayChange?, OtherCurrency*, RebatePromotion*)
        /// </para>
        /// </summary>
        public partial class TPA_Extensions : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OtherCurrencyLocalType> OtherCurrencyField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<RebatePromotionLocalType> RebatePromotionField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator TPA_Extensions(XElement xe) { return XTypedServices.ToXTypedElement<TPA_Extensions>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static TPA_Extensions()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PayChange", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("OtherCurrency", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("RebatePromotion", "http://www.opentravel.org/OTA/2003/05")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (PayChange?, OtherCurrency*, RebatePromotion*)
            /// </para>
            /// </summary>
            public TPA_Extensions()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PayChange?, OtherCurrency*, RebatePromotion*)
            /// </para>
            /// </summary>
            public string PayChange
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("PayChange", "http://www.opentravel.org/OTA/2003/05"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("PayChange", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (PayChange?, OtherCurrency*, RebatePromotion*)
            /// </para>
            /// </summary>
            public IList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions.OtherCurrencyLocalType> OtherCurrency
            {
                get
                {
                    if ((this.OtherCurrencyField == null))
                    {
                        this.OtherCurrencyField = new XTypedList<OtherCurrencyLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("OtherCurrency", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    return this.OtherCurrencyField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.OtherCurrencyField = null;
                    }
                    else
                    {
                        if ((this.OtherCurrencyField == null))
                        {
                            this.OtherCurrencyField = XTypedList<OtherCurrencyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OtherCurrency", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        else
                        {
                            XTypedServices.SetList<OtherCurrencyLocalType>(this.OtherCurrencyField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (PayChange?, OtherCurrency*, RebatePromotion*)
            /// </para>
            /// </summary>
            public IList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions.RebatePromotionLocalType> RebatePromotion
            {
                get
                {
                    if ((this.RebatePromotionField == null))
                    {
                        this.RebatePromotionField = new XTypedList<RebatePromotionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("RebatePromotion", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    return this.RebatePromotionField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.RebatePromotionField = null;
                    }
                    else
                    {
                        if ((this.RebatePromotionField == null))
                        {
                            this.RebatePromotionField = XTypedList<RebatePromotionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RebatePromotion", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        else
                        {
                            XTypedServices.SetList<RebatePromotionLocalType>(this.RebatePromotionField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static TPA_Extensions Load(string xmlFile)
            {
                return XTypedServices.Load<TPA_Extensions>(xmlFile);
            }

            public static TPA_Extensions Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<TPA_Extensions>(xmlFile);
            }

            public static TPA_Extensions Parse(string xml)
            {
                return XTypedServices.Parse<TPA_Extensions>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<TPA_Extensions>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("PayChange", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                localElementDictionary.Add(XName.Get("OtherCurrency", "http://www.opentravel.org/OTA/2003/05"), typeof(OtherCurrencyLocalType));
                localElementDictionary.Add(XName.Get("RebatePromotion", "http://www.opentravel.org/OTA/2003/05"), typeof(RebatePromotionLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (AmountPercentType*)
            /// </para>
            /// </summary>
            public partial class OtherCurrencyLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<AmountPercentTypeLocalType> AmountPercentTypeField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator OtherCurrencyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OtherCurrencyLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static OtherCurrencyLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AmountPercentType", "http://www.opentravel.org/OTA/2003/05")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (AmountPercentType*)
                /// </para>
                /// </summary>
                public OtherCurrencyLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (AmountPercentType*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions.OtherCurrencyLocalType.AmountPercentTypeLocalType> AmountPercentType
                {
                    get
                    {
                        if ((this.AmountPercentTypeField == null))
                        {
                            this.AmountPercentTypeField = new XTypedList<AmountPercentTypeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("AmountPercentType", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.AmountPercentTypeField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.AmountPercentTypeField = null;
                        }
                        else
                        {
                            if ((this.AmountPercentTypeField == null))
                            {
                                this.AmountPercentTypeField = XTypedList<AmountPercentTypeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AmountPercentType", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else
                            {
                                XTypedServices.SetList<AmountPercentTypeLocalType>(this.AmountPercentTypeField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("OtherCurrency", "http://www.opentravel.org/OTA/2003/05");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<OtherCurrencyLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("AmountPercentType", "http://www.opentravel.org/OTA/2003/05"), typeof(AmountPercentTypeLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class AmountPercentTypeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator AmountPercentTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AmountPercentTypeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public AmountPercentTypeLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string Amount
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("Amount", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("Amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string CurrencyCode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("CurrencyCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("AmountPercentType", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<AmountPercentTypeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Description*)
            /// </para>
            /// </summary>
            public partial class RebatePromotionLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<Description> DescriptionField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator RebatePromotionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RebatePromotionLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static RebatePromotionLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Description*)
                /// </para>
                /// </summary>
                public RebatePromotionLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Description*)
                /// </para>
                /// </summary>
                public IList<Description> Description
                {
                    get
                    {
                        if ((this.DescriptionField == null))
                        {
                            this.DescriptionField = new XTypedList<Description>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.DescriptionField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.DescriptionField = null;
                        }
                        else
                        {
                            if ((this.DescriptionField == null))
                            {
                                this.DescriptionField = XTypedList<Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else
                            {
                                XTypedServices.SetList<Description>(this.DescriptionField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string StartPeriod
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("StartPeriod", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("StartPeriod", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string EndPeriod
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("EndPeriod", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("EndPeriod", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string ProgramName
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ProgramName", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ProgramName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Amount
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("Amount", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("Amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string CurrencyCode
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("CurrencyCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Code
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("Code", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("RebatePromotion", "http://www.opentravel.org/OTA/2003/05");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<RebatePromotionLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(Description));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Text?)
        /// </para>
        /// </summary>
        public partial class Description : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator Description(XElement xe) { return XTypedServices.ToXTypedElement<Description>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static Description()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Text?)
            /// </para>
            /// </summary>
            public Description()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Text?)
            /// </para>
            /// </summary>
            public string Text
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Description", "http://www.opentravel.org/OTA/2003/05");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Description Load(string xmlFile)
            {
                return XTypedServices.Load<Description>(xmlFile);
            }

            public static Description Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Description>(xmlFile);
            }

            public static Description Parse(string xml)
            {
                return XTypedServices.Parse<Description>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Description>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Success?, RatePlans*)
        /// </para>
        /// </summary>
        public partial class OTA_HotelRatePlanRS : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<RatePlansLocalType> RatePlansField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator OTA_HotelRatePlanRS(XElement xe) { return XTypedServices.ToXTypedElement<OTA_HotelRatePlanRS>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static OTA_HotelRatePlanRS()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Success", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("RatePlans", "http://www.opentravel.org/OTA/2003/05")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Success?, RatePlans*)
            /// </para>
            /// </summary>
            public OTA_HotelRatePlanRS()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Success?, RatePlans*)
            /// </para>
            /// </summary>
            public string Success
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Success", "http://www.opentravel.org/OTA/2003/05"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Success", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Success?, RatePlans*)
            /// </para>
            /// </summary>
            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType> RatePlans
            {
                get
                {
                    if ((this.RatePlansField == null))
                    {
                        this.RatePlansField = new XTypedList<RatePlansLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("RatePlans", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    return this.RatePlansField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.RatePlansField = null;
                    }
                    else
                    {
                        if ((this.RatePlansField == null))
                        {
                            this.RatePlansField = XTypedList<RatePlansLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RatePlans", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        else
                        {
                            XTypedServices.SetList<RatePlansLocalType>(this.RatePlansField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string TimeStamp
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("TimeStamp", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("TimeStamp", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Version
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("Version", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string PrimaryLangID
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("PrimaryLangID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("PrimaryLangID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("OTA_HotelRatePlanRS", "http://www.opentravel.org/OTA/2003/05");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static OTA_HotelRatePlanRS Load(string xmlFile)
            {
                return XTypedServices.Load<OTA_HotelRatePlanRS>(xmlFile);
            }

            public static OTA_HotelRatePlanRS Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<OTA_HotelRatePlanRS>(xmlFile);
            }

            public static OTA_HotelRatePlanRS Parse(string xml)
            {
                return XTypedServices.Parse<OTA_HotelRatePlanRS>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<OTA_HotelRatePlanRS>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("Success", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                localElementDictionary.Add(XName.Get("RatePlans", "http://www.opentravel.org/OTA/2003/05"), typeof(RatePlansLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (RatePlan*)
            /// </para>
            /// </summary>
            public partial class RatePlansLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<RatePlanLocalType> RatePlanField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator RatePlansLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RatePlansLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static RatePlansLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RatePlan", "http://www.opentravel.org/OTA/2003/05")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (RatePlan*)
                /// </para>
                /// </summary>
                public RatePlansLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (RatePlan*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType> RatePlan
                {
                    get
                    {
                        if ((this.RatePlanField == null))
                        {
                            this.RatePlanField = new XTypedList<RatePlanLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("RatePlan", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.RatePlanField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.RatePlanField = null;
                        }
                        else
                        {
                            if ((this.RatePlanField == null))
                            {
                                this.RatePlanField = XTypedList<RatePlanLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RatePlan", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else
                            {
                                XTypedServices.SetList<RatePlanLocalType>(this.RatePlanField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string HotelCode
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("HotelCode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("HotelCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("RatePlans", "http://www.opentravel.org/OTA/2003/05");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<RatePlansLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("RatePlan", "http://www.opentravel.org/OTA/2003/05"), typeof(RatePlanLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (BookingRules*, Rates*, Offers*, SellableProducts*, Description*)
                /// </para>
                /// </summary>
                public partial class RatePlanLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<BookingRules> BookingRulesField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<RatesLocalType> RatesField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<OffersLocalType> OffersField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<SellableProductsLocalType> SellableProductsField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<Description> DescriptionField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator RatePlanLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RatePlanLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static RatePlanLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Rates", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Offers", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("SellableProducts", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (BookingRules*, Rates*, Offers*, SellableProducts*, Description*)
                    /// </para>
                    /// </summary>
                    public RatePlanLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (BookingRules*, Rates*, Offers*, SellableProducts*, Description*)
                    /// </para>
                    /// </summary>
                    public IList<BookingRules> BookingRules
                    {
                        get
                        {
                            if ((this.BookingRulesField == null))
                            {
                                this.BookingRulesField = new XTypedList<BookingRules>(this, LinqToXsdTypeManager.Instance, XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.BookingRulesField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.BookingRulesField = null;
                            }
                            else
                            {
                                if ((this.BookingRulesField == null))
                                {
                                    this.BookingRulesField = XTypedList<BookingRules>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else
                                {
                                    XTypedServices.SetList<BookingRules>(this.BookingRulesField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (BookingRules*, Rates*, Offers*, SellableProducts*, Description*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType> Rates
                    {
                        get
                        {
                            if ((this.RatesField == null))
                            {
                                this.RatesField = new XTypedList<RatesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Rates", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.RatesField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.RatesField = null;
                            }
                            else
                            {
                                if ((this.RatesField == null))
                                {
                                    this.RatesField = XTypedList<RatesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Rates", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else
                                {
                                    XTypedServices.SetList<RatesLocalType>(this.RatesField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (BookingRules*, Rates*, Offers*, SellableProducts*, Description*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.OffersLocalType> Offers
                    {
                        get
                        {
                            if ((this.OffersField == null))
                            {
                                this.OffersField = new XTypedList<OffersLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Offers", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.OffersField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.OffersField = null;
                            }
                            else
                            {
                                if ((this.OffersField == null))
                                {
                                    this.OffersField = XTypedList<OffersLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Offers", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else
                                {
                                    XTypedServices.SetList<OffersLocalType>(this.OffersField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (BookingRules*, Rates*, Offers*, SellableProducts*, Description*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.SellableProductsLocalType> SellableProducts
                    {
                        get
                        {
                            if ((this.SellableProductsField == null))
                            {
                                this.SellableProductsField = new XTypedList<SellableProductsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("SellableProducts", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.SellableProductsField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.SellableProductsField = null;
                            }
                            else
                            {
                                if ((this.SellableProductsField == null))
                                {
                                    this.SellableProductsField = XTypedList<SellableProductsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SellableProducts", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else
                                {
                                    XTypedServices.SetList<SellableProductsLocalType>(this.SellableProductsField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (BookingRules*, Rates*, Offers*, SellableProducts*, Description*)
                    /// </para>
                    /// </summary>
                    public IList<Description> Description
                    {
                        get
                        {
                            if ((this.DescriptionField == null))
                            {
                                this.DescriptionField = new XTypedList<Description>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.DescriptionField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.DescriptionField = null;
                            }
                            else
                            {
                                if ((this.DescriptionField == null))
                                {
                                    this.DescriptionField = XTypedList<Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else
                                {
                                    XTypedServices.SetList<Description>(this.DescriptionField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string RatePlanCode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("RatePlanCode", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("RatePlanCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string RatePlanCategory
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("RatePlanCategory", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("RatePlanCategory", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string IsCommissionable
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("IsCommissionable", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("IsCommissionable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string RateReturn
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("RateReturn", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("RateReturn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string MarketCode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("MarketCode", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("MarketCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("RatePlan", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<RatePlanLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"), typeof(BookingRules));
                        localElementDictionary.Add(XName.Get("Rates", "http://www.opentravel.org/OTA/2003/05"), typeof(RatesLocalType));
                        localElementDictionary.Add(XName.Get("Offers", "http://www.opentravel.org/OTA/2003/05"), typeof(OffersLocalType));
                        localElementDictionary.Add(XName.Get("SellableProducts", "http://www.opentravel.org/OTA/2003/05"), typeof(SellableProductsLocalType));
                        localElementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(Description));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Rate*)
                    /// </para>
                    /// </summary>
                    public partial class RatesLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<RateLocalType> RateField;

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator RatesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RatesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static RatesLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Rate", "http://www.opentravel.org/OTA/2003/05")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Rate*)
                        /// </para>
                        /// </summary>
                        public RatesLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (Rate*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType> Rate
                        {
                            get
                            {
                                if ((this.RateField == null))
                                {
                                    this.RateField = new XTypedList<RateLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Rate", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.RateField;
                            }
                            set
                            {
                                if ((value == null))
                                {
                                    this.RateField = null;
                                }
                                else
                                {
                                    if ((this.RateField == null))
                                    {
                                        this.RateField = XTypedList<RateLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Rate", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else
                                    {
                                        XTypedServices.SetList<RateLocalType>(this.RateField, value);
                                    }
                                }
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("Rates", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<RatesLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("Rate", "http://www.opentravel.org/OTA/2003/05"), typeof(RateLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (BaseByGuestAmts*, Fees*, GuaranteePolicies*, CancelPolicies*, MealsIncluded*, TPA_Extensions*, BookingRules*)
                        /// </para>
                        /// </summary>
                        public partial class RateLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<BaseByGuestAmtsLocalType> BaseByGuestAmtsField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<FeesLocalType> FeesField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<GuaranteePoliciesLocalType> GuaranteePoliciesField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<CancelPoliciesLocalType> CancelPoliciesField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<MealsIncludedLocalType> MealsIncludedField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<TPA_Extensions> TPA_ExtensionsField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<BookingRules> BookingRulesField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator RateLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RateLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static RateLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("BaseByGuestAmts", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Fees", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("GuaranteePolicies", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("CancelPolicies", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("MealsIncluded", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (BaseByGuestAmts*, Fees*, GuaranteePolicies*, CancelPolicies*, MealsIncluded*, TPA_Extensions*, BookingRules*)
                            /// </para>
                            /// </summary>
                            public RateLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (BaseByGuestAmts*, Fees*, GuaranteePolicies*, CancelPolicies*, MealsIncluded*, TPA_Extensions*, BookingRules*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.BaseByGuestAmtsLocalType> BaseByGuestAmts
                            {
                                get
                                {
                                    if ((this.BaseByGuestAmtsField == null))
                                    {
                                        this.BaseByGuestAmtsField = new XTypedList<BaseByGuestAmtsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("BaseByGuestAmts", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.BaseByGuestAmtsField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.BaseByGuestAmtsField = null;
                                    }
                                    else
                                    {
                                        if ((this.BaseByGuestAmtsField == null))
                                        {
                                            this.BaseByGuestAmtsField = XTypedList<BaseByGuestAmtsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BaseByGuestAmts", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<BaseByGuestAmtsLocalType>(this.BaseByGuestAmtsField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (BaseByGuestAmts*, Fees*, GuaranteePolicies*, CancelPolicies*, MealsIncluded*, TPA_Extensions*, BookingRules*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.FeesLocalType> Fees
                            {
                                get
                                {
                                    if ((this.FeesField == null))
                                    {
                                        this.FeesField = new XTypedList<FeesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Fees", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.FeesField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.FeesField = null;
                                    }
                                    else
                                    {
                                        if ((this.FeesField == null))
                                        {
                                            this.FeesField = XTypedList<FeesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fees", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<FeesLocalType>(this.FeesField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (BaseByGuestAmts*, Fees*, GuaranteePolicies*, CancelPolicies*, MealsIncluded*, TPA_Extensions*, BookingRules*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.GuaranteePoliciesLocalType> GuaranteePolicies
                            {
                                get
                                {
                                    if ((this.GuaranteePoliciesField == null))
                                    {
                                        this.GuaranteePoliciesField = new XTypedList<GuaranteePoliciesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("GuaranteePolicies", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.GuaranteePoliciesField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.GuaranteePoliciesField = null;
                                    }
                                    else
                                    {
                                        if ((this.GuaranteePoliciesField == null))
                                        {
                                            this.GuaranteePoliciesField = XTypedList<GuaranteePoliciesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GuaranteePolicies", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<GuaranteePoliciesLocalType>(this.GuaranteePoliciesField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (BaseByGuestAmts*, Fees*, GuaranteePolicies*, CancelPolicies*, MealsIncluded*, TPA_Extensions*, BookingRules*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.CancelPoliciesLocalType> CancelPolicies
                            {
                                get
                                {
                                    if ((this.CancelPoliciesField == null))
                                    {
                                        this.CancelPoliciesField = new XTypedList<CancelPoliciesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("CancelPolicies", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.CancelPoliciesField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.CancelPoliciesField = null;
                                    }
                                    else
                                    {
                                        if ((this.CancelPoliciesField == null))
                                        {
                                            this.CancelPoliciesField = XTypedList<CancelPoliciesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CancelPolicies", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<CancelPoliciesLocalType>(this.CancelPoliciesField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (BaseByGuestAmts*, Fees*, GuaranteePolicies*, CancelPolicies*, MealsIncluded*, TPA_Extensions*, BookingRules*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.MealsIncludedLocalType> MealsIncluded
                            {
                                get
                                {
                                    if ((this.MealsIncludedField == null))
                                    {
                                        this.MealsIncludedField = new XTypedList<MealsIncludedLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("MealsIncluded", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.MealsIncludedField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.MealsIncludedField = null;
                                    }
                                    else
                                    {
                                        if ((this.MealsIncludedField == null))
                                        {
                                            this.MealsIncludedField = XTypedList<MealsIncludedLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MealsIncluded", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<MealsIncludedLocalType>(this.MealsIncludedField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (BaseByGuestAmts*, Fees*, GuaranteePolicies*, CancelPolicies*, MealsIncluded*, TPA_Extensions*, BookingRules*)
                            /// </para>
                            /// </summary>
                            public IList<TPA_Extensions> TPA_Extensions
                            {
                                get
                                {
                                    if ((this.TPA_ExtensionsField == null))
                                    {
                                        this.TPA_ExtensionsField = new XTypedList<TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.TPA_ExtensionsField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.TPA_ExtensionsField = null;
                                    }
                                    else
                                    {
                                        if ((this.TPA_ExtensionsField == null))
                                        {
                                            this.TPA_ExtensionsField = XTypedList<TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<TPA_Extensions>(this.TPA_ExtensionsField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (BaseByGuestAmts*, Fees*, GuaranteePolicies*, CancelPolicies*, MealsIncluded*, TPA_Extensions*, BookingRules*)
                            /// </para>
                            /// </summary>
                            public IList<BookingRules> BookingRules
                            {
                                get
                                {
                                    if ((this.BookingRulesField == null))
                                    {
                                        this.BookingRulesField = new XTypedList<BookingRules>(this, LinqToXsdTypeManager.Instance, XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.BookingRulesField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.BookingRulesField = null;
                                    }
                                    else
                                    {
                                        if ((this.BookingRulesField == null))
                                        {
                                            this.BookingRulesField = XTypedList<BookingRules>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<BookingRules>(this.BookingRulesField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string NumberOfUnits
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("NumberOfUnits", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("NumberOfUnits", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Start
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("Start", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("Start", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string End
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("End", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("End", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string IsInstantConfirm
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("IsInstantConfirm", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("IsInstantConfirm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Status
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("Status", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("Status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("Rate", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<RateLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("BaseByGuestAmts", "http://www.opentravel.org/OTA/2003/05"), typeof(BaseByGuestAmtsLocalType));
                                localElementDictionary.Add(XName.Get("Fees", "http://www.opentravel.org/OTA/2003/05"), typeof(FeesLocalType));
                                localElementDictionary.Add(XName.Get("GuaranteePolicies", "http://www.opentravel.org/OTA/2003/05"), typeof(GuaranteePoliciesLocalType));
                                localElementDictionary.Add(XName.Get("CancelPolicies", "http://www.opentravel.org/OTA/2003/05"), typeof(CancelPoliciesLocalType));
                                localElementDictionary.Add(XName.Get("MealsIncluded", "http://www.opentravel.org/OTA/2003/05"), typeof(MealsIncludedLocalType));
                                localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(TPA_Extensions));
                                localElementDictionary.Add(XName.Get("BookingRules", "http://www.opentravel.org/OTA/2003/05"), typeof(BookingRules));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (BaseByGuestAmt*)
                            /// </para>
                            /// </summary>
                            public partial class BaseByGuestAmtsLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<BaseByGuestAmtLocalType> BaseByGuestAmtField;

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator BaseByGuestAmtsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BaseByGuestAmtsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static BaseByGuestAmtsLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("BaseByGuestAmt", "http://www.opentravel.org/OTA/2003/05")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (BaseByGuestAmt*)
                                /// </para>
                                /// </summary>
                                public BaseByGuestAmtsLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (BaseByGuestAmt*)
                                /// </para>
                                /// </summary>
                                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.BaseByGuestAmtsLocalType.BaseByGuestAmtLocalType> BaseByGuestAmt
                                {
                                    get
                                    {
                                        if ((this.BaseByGuestAmtField == null))
                                        {
                                            this.BaseByGuestAmtField = new XTypedList<BaseByGuestAmtLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("BaseByGuestAmt", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.BaseByGuestAmtField;
                                    }
                                    set
                                    {
                                        if ((value == null))
                                        {
                                            this.BaseByGuestAmtField = null;
                                        }
                                        else
                                        {
                                            if ((this.BaseByGuestAmtField == null))
                                            {
                                                this.BaseByGuestAmtField = XTypedList<BaseByGuestAmtLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BaseByGuestAmt", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else
                                            {
                                                XTypedServices.SetList<BaseByGuestAmtLocalType>(this.BaseByGuestAmtField, value);
                                            }
                                        }
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("BaseByGuestAmts", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<BaseByGuestAmtsLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("BaseByGuestAmt", "http://www.opentravel.org/OTA/2003/05"), typeof(BaseByGuestAmtLocalType));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (TPA_Extensions*)
                                /// </para>
                                /// </summary>
                                public partial class BaseByGuestAmtLocalType : XTypedElement, IXMetaData
                                {

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private XTypedList<TPA_Extensions> TPA_ExtensionsField;

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;

                                    public static explicit operator BaseByGuestAmtLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BaseByGuestAmtLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                    static BaseByGuestAmtLocalType()
                                    {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05")));
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (TPA_Extensions*)
                                    /// </para>
                                    /// </summary>
                                    public BaseByGuestAmtLocalType()
                                    {
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional, repeating
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (TPA_Extensions*)
                                    /// </para>
                                    /// </summary>
                                    public IList<TPA_Extensions> TPA_Extensions
                                    {
                                        get
                                        {
                                            if ((this.TPA_ExtensionsField == null))
                                            {
                                                this.TPA_ExtensionsField = new XTypedList<TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            return this.TPA_ExtensionsField;
                                        }
                                        set
                                        {
                                            if ((value == null))
                                            {
                                                this.TPA_ExtensionsField = null;
                                            }
                                            else
                                            {
                                                if ((this.TPA_ExtensionsField == null))
                                                {
                                                    this.TPA_ExtensionsField = XTypedList<TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                                }
                                                else
                                                {
                                                    XTypedServices.SetList<TPA_Extensions>(this.TPA_ExtensionsField, value);
                                                }
                                            }
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string AmountBeforeTax
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("AmountBeforeTax", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("AmountBeforeTax", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string CurrencyCode
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("CurrencyCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string NumberOfGuests
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("NumberOfGuests", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("NumberOfGuests", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string ListPrice
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("ListPrice", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("ListPrice", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                    {
                                        get
                                        {
                                            return localElementDictionary;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName
                                    {
                                        get
                                        {
                                            return XName.Get("BaseByGuestAmt", "http://www.opentravel.org/OTA/2003/05");
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin
                                    {
                                        get
                                        {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager
                                    {
                                        get
                                        {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }

                                    public override XTypedElement Clone()
                                    {
                                        return XTypedServices.CloneXTypedElement<BaseByGuestAmtLocalType>(this);
                                    }

                                    private static void BuildElementDictionary()
                                    {
                                        localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(TPA_Extensions));
                                    }

                                    ContentModelEntity IXMetaData.GetContentModel()
                                    {
                                        return contentModel;
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Fee*)
                            /// </para>
                            /// </summary>
                            public partial class FeesLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<FeeLocalType> FeeField;

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator FeesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FeesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static FeesLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Fee", "http://www.opentravel.org/OTA/2003/05")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Fee*)
                                /// </para>
                                /// </summary>
                                public FeesLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (Fee*)
                                /// </para>
                                /// </summary>
                                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.FeesLocalType.FeeLocalType> Fee
                                {
                                    get
                                    {
                                        if ((this.FeeField == null))
                                        {
                                            this.FeeField = new XTypedList<FeeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Fee", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.FeeField;
                                    }
                                    set
                                    {
                                        if ((value == null))
                                        {
                                            this.FeeField = null;
                                        }
                                        else
                                        {
                                            if ((this.FeeField == null))
                                            {
                                                this.FeeField = XTypedList<FeeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fee", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else
                                            {
                                                XTypedServices.SetList<FeeLocalType>(this.FeeField, value);
                                            }
                                        }
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("Fees", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<FeesLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("Fee", "http://www.opentravel.org/OTA/2003/05"), typeof(FeeLocalType));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Description*, TPA_Extensions*)
                                /// </para>
                                /// </summary>
                                public partial class FeeLocalType : XTypedElement, IXMetaData
                                {

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private XTypedList<Description> DescriptionField;

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private XTypedList<TPA_Extensions> TPA_ExtensionsField;

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;

                                    public static explicit operator FeeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FeeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                    static FeeLocalType()
                                    {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05")));
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (Description*, TPA_Extensions*)
                                    /// </para>
                                    /// </summary>
                                    public FeeLocalType()
                                    {
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional, repeating
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (Description*, TPA_Extensions*)
                                    /// </para>
                                    /// </summary>
                                    public IList<Description> Description
                                    {
                                        get
                                        {
                                            if ((this.DescriptionField == null))
                                            {
                                                this.DescriptionField = new XTypedList<Description>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            return this.DescriptionField;
                                        }
                                        set
                                        {
                                            if ((value == null))
                                            {
                                                this.DescriptionField = null;
                                            }
                                            else
                                            {
                                                if ((this.DescriptionField == null))
                                                {
                                                    this.DescriptionField = XTypedList<Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                                                }
                                                else
                                                {
                                                    XTypedServices.SetList<Description>(this.DescriptionField, value);
                                                }
                                            }
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional, repeating
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (Description*, TPA_Extensions*)
                                    /// </para>
                                    /// </summary>
                                    public IList<TPA_Extensions> TPA_Extensions
                                    {
                                        get
                                        {
                                            if ((this.TPA_ExtensionsField == null))
                                            {
                                                this.TPA_ExtensionsField = new XTypedList<TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            return this.TPA_ExtensionsField;
                                        }
                                        set
                                        {
                                            if ((value == null))
                                            {
                                                this.TPA_ExtensionsField = null;
                                            }
                                            else
                                            {
                                                if ((this.TPA_ExtensionsField == null))
                                                {
                                                    this.TPA_ExtensionsField = XTypedList<TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                                }
                                                else
                                                {
                                                    XTypedServices.SetList<TPA_Extensions>(this.TPA_ExtensionsField, value);
                                                }
                                            }
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string Code
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("Code", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string Amount
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("Amount", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("Amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string CurrencyCode
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("CurrencyCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string ChargeUnit
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("ChargeUnit", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("ChargeUnit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                    {
                                        get
                                        {
                                            return localElementDictionary;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName
                                    {
                                        get
                                        {
                                            return XName.Get("Fee", "http://www.opentravel.org/OTA/2003/05");
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin
                                    {
                                        get
                                        {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager
                                    {
                                        get
                                        {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }

                                    public override XTypedElement Clone()
                                    {
                                        return XTypedServices.CloneXTypedElement<FeeLocalType>(this);
                                    }

                                    private static void BuildElementDictionary()
                                    {
                                        localElementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(Description));
                                        localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(TPA_Extensions));
                                    }

                                    ContentModelEntity IXMetaData.GetContentModel()
                                    {
                                        return contentModel;
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (GuaranteePolicy*)
                            /// </para>
                            /// </summary>
                            public partial class GuaranteePoliciesLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<GuaranteePolicyLocalType> GuaranteePolicyField;

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator GuaranteePoliciesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<GuaranteePoliciesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static GuaranteePoliciesLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GuaranteePolicy", "http://www.opentravel.org/OTA/2003/05")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (GuaranteePolicy*)
                                /// </para>
                                /// </summary>
                                public GuaranteePoliciesLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (GuaranteePolicy*)
                                /// </para>
                                /// </summary>
                                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.GuaranteePoliciesLocalType.GuaranteePolicyLocalType> GuaranteePolicy
                                {
                                    get
                                    {
                                        if ((this.GuaranteePolicyField == null))
                                        {
                                            this.GuaranteePolicyField = new XTypedList<GuaranteePolicyLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("GuaranteePolicy", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.GuaranteePolicyField;
                                    }
                                    set
                                    {
                                        if ((value == null))
                                        {
                                            this.GuaranteePolicyField = null;
                                        }
                                        else
                                        {
                                            if ((this.GuaranteePolicyField == null))
                                            {
                                                this.GuaranteePolicyField = XTypedList<GuaranteePolicyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GuaranteePolicy", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else
                                            {
                                                XTypedServices.SetList<GuaranteePolicyLocalType>(this.GuaranteePolicyField, value);
                                            }
                                        }
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("GuaranteePolicies", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<GuaranteePoliciesLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("GuaranteePolicy", "http://www.opentravel.org/OTA/2003/05"), typeof(GuaranteePolicyLocalType));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }

                                public partial class GuaranteePolicyLocalType : XTypedElement, IXMetaData
                                {

                                    public static explicit operator GuaranteePolicyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<GuaranteePolicyLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                    public GuaranteePolicyLocalType()
                                    {
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string GuaranteeCode
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("GuaranteeCode", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("GuaranteeCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string HoldTime
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("HoldTime", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("HoldTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName
                                    {
                                        get
                                        {
                                            return XName.Get("GuaranteePolicy", "http://www.opentravel.org/OTA/2003/05");
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin
                                    {
                                        get
                                        {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager
                                    {
                                        get
                                        {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }

                                    public override XTypedElement Clone()
                                    {
                                        return XTypedServices.CloneXTypedElement<GuaranteePolicyLocalType>(this);
                                    }

                                    ContentModelEntity IXMetaData.GetContentModel()
                                    {
                                        return ContentModelEntity.Default;
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (CancelPenalty*)
                            /// </para>
                            /// </summary>
                            public partial class CancelPoliciesLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<CancelPenaltyLocalType> CancelPenaltyField;

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator CancelPoliciesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CancelPoliciesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static CancelPoliciesLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CancelPenalty", "http://www.opentravel.org/OTA/2003/05")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (CancelPenalty*)
                                /// </para>
                                /// </summary>
                                public CancelPoliciesLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (CancelPenalty*)
                                /// </para>
                                /// </summary>
                                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.CancelPoliciesLocalType.CancelPenaltyLocalType> CancelPenalty
                                {
                                    get
                                    {
                                        if ((this.CancelPenaltyField == null))
                                        {
                                            this.CancelPenaltyField = new XTypedList<CancelPenaltyLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("CancelPenalty", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.CancelPenaltyField;
                                    }
                                    set
                                    {
                                        if ((value == null))
                                        {
                                            this.CancelPenaltyField = null;
                                        }
                                        else
                                        {
                                            if ((this.CancelPenaltyField == null))
                                            {
                                                this.CancelPenaltyField = XTypedList<CancelPenaltyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CancelPenalty", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else
                                            {
                                                XTypedServices.SetList<CancelPenaltyLocalType>(this.CancelPenaltyField, value);
                                            }
                                        }
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("CancelPolicies", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<CancelPoliciesLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("CancelPenalty", "http://www.opentravel.org/OTA/2003/05"), typeof(CancelPenaltyLocalType));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (AmountPercent*, TPA_Extensions*)
                                /// </para>
                                /// </summary>
                                public partial class CancelPenaltyLocalType : XTypedElement, IXMetaData
                                {

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private XTypedList<AmountPercentLocalType> AmountPercentField;

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private XTypedList<TPA_Extensions> TPA_ExtensionsField;

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;

                                    public static explicit operator CancelPenaltyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CancelPenaltyLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                    static CancelPenaltyLocalType()
                                    {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AmountPercent", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05")));
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (AmountPercent*, TPA_Extensions*)
                                    /// </para>
                                    /// </summary>
                                    public CancelPenaltyLocalType()
                                    {
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional, repeating
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (AmountPercent*, TPA_Extensions*)
                                    /// </para>
                                    /// </summary>
                                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.RatesLocalType.RateLocalType.CancelPoliciesLocalType.CancelPenaltyLocalType.AmountPercentLocalType> AmountPercent
                                    {
                                        get
                                        {
                                            if ((this.AmountPercentField == null))
                                            {
                                                this.AmountPercentField = new XTypedList<AmountPercentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("AmountPercent", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            return this.AmountPercentField;
                                        }
                                        set
                                        {
                                            if ((value == null))
                                            {
                                                this.AmountPercentField = null;
                                            }
                                            else
                                            {
                                                if ((this.AmountPercentField == null))
                                                {
                                                    this.AmountPercentField = XTypedList<AmountPercentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AmountPercent", "http://www.opentravel.org/OTA/2003/05"));
                                                }
                                                else
                                                {
                                                    XTypedServices.SetList<AmountPercentLocalType>(this.AmountPercentField, value);
                                                }
                                            }
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional, repeating
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (AmountPercent*, TPA_Extensions*)
                                    /// </para>
                                    /// </summary>
                                    public IList<TPA_Extensions> TPA_Extensions
                                    {
                                        get
                                        {
                                            if ((this.TPA_ExtensionsField == null))
                                            {
                                                this.TPA_ExtensionsField = new XTypedList<TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            return this.TPA_ExtensionsField;
                                        }
                                        set
                                        {
                                            if ((value == null))
                                            {
                                                this.TPA_ExtensionsField = null;
                                            }
                                            else
                                            {
                                                if ((this.TPA_ExtensionsField == null))
                                                {
                                                    this.TPA_ExtensionsField = XTypedList<TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                                }
                                                else
                                                {
                                                    XTypedServices.SetList<TPA_Extensions>(this.TPA_ExtensionsField, value);
                                                }
                                            }
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string Start
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("Start", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("Start", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string End
                                    {
                                        get
                                        {
                                            XAttribute x = this.Attribute(XName.Get("End", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetAttribute(XName.Get("End", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                    {
                                        get
                                        {
                                            return localElementDictionary;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName
                                    {
                                        get
                                        {
                                            return XName.Get("CancelPenalty", "http://www.opentravel.org/OTA/2003/05");
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin
                                    {
                                        get
                                        {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager
                                    {
                                        get
                                        {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }

                                    public override XTypedElement Clone()
                                    {
                                        return XTypedServices.CloneXTypedElement<CancelPenaltyLocalType>(this);
                                    }

                                    private static void BuildElementDictionary()
                                    {
                                        localElementDictionary.Add(XName.Get("AmountPercent", "http://www.opentravel.org/OTA/2003/05"), typeof(AmountPercentLocalType));
                                        localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(TPA_Extensions));
                                    }

                                    ContentModelEntity IXMetaData.GetContentModel()
                                    {
                                        return contentModel;
                                    }

                                    public partial class AmountPercentLocalType : XTypedElement, IXMetaData
                                    {

                                        public static explicit operator AmountPercentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AmountPercentLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                        public AmountPercentLocalType()
                                        {
                                        }

                                        /// <summary>
                                        /// <para>
                                        /// Occurrence: optional
                                        /// </para>
                                        /// </summary>
                                        public string Amount
                                        {
                                            get
                                            {
                                                XAttribute x = this.Attribute(XName.Get("Amount", ""));
                                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                            set
                                            {
                                                this.SetAttribute(XName.Get("Amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                        }

                                        /// <summary>
                                        /// <para>
                                        /// Occurrence: optional
                                        /// </para>
                                        /// </summary>
                                        public string CurrencyCode
                                        {
                                            get
                                            {
                                                XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                            set
                                            {
                                                this.SetAttribute(XName.Get("CurrencyCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                        }

                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        XName IXMetaData.SchemaName
                                        {
                                            get
                                            {
                                                return XName.Get("AmountPercent", "http://www.opentravel.org/OTA/2003/05");
                                            }
                                        }

                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        SchemaOrigin IXMetaData.TypeOrigin
                                        {
                                            get
                                            {
                                                return SchemaOrigin.Fragment;
                                            }
                                        }

                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        ILinqToXsdTypeManager IXMetaData.TypeManager
                                        {
                                            get
                                            {
                                                return LinqToXsdTypeManager.Instance;
                                            }
                                        }

                                        public override XTypedElement Clone()
                                        {
                                            return XTypedServices.CloneXTypedElement<AmountPercentLocalType>(this);
                                        }

                                        ContentModelEntity IXMetaData.GetContentModel()
                                        {
                                            return ContentModelEntity.Default;
                                        }
                                    }
                                }
                            }

                            public partial class MealsIncludedLocalType : XTypedElement, IXMetaData
                            {

                                public static explicit operator MealsIncludedLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MealsIncludedLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                public MealsIncludedLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string Breakfast
                                {
                                    get
                                    {
                                        XAttribute x = this.Attribute(XName.Get("Breakfast", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetAttribute(XName.Get("Breakfast", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string NumberOfBreakfast
                                {
                                    get
                                    {
                                        XAttribute x = this.Attribute(XName.Get("NumberOfBreakfast", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetAttribute(XName.Get("NumberOfBreakfast", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("MealsIncluded", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<MealsIncludedLocalType>(this);
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return ContentModelEntity.Default;
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Offer*)
                    /// </para>
                    /// </summary>
                    public partial class OffersLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<OfferLocalType> OfferField;

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator OffersLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OffersLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static OffersLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Offer", "http://www.opentravel.org/OTA/2003/05")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Offer*)
                        /// </para>
                        /// </summary>
                        public OffersLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (Offer*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.OffersLocalType.OfferLocalType> Offer
                        {
                            get
                            {
                                if ((this.OfferField == null))
                                {
                                    this.OfferField = new XTypedList<OfferLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Offer", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.OfferField;
                            }
                            set
                            {
                                if ((value == null))
                                {
                                    this.OfferField = null;
                                }
                                else
                                {
                                    if ((this.OfferField == null))
                                    {
                                        this.OfferField = XTypedList<OfferLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Offer", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else
                                    {
                                        XTypedServices.SetList<OfferLocalType>(this.OfferField, value);
                                    }
                                }
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("Offers", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<OffersLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("Offer", "http://www.opentravel.org/OTA/2003/05"), typeof(OfferLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (OfferRules*, OfferDescription*, Discount*)
                        /// </para>
                        /// </summary>
                        public partial class OfferLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<OfferRulesLocalType> OfferRulesField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<OfferDescriptionLocalType> OfferDescriptionField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<DiscountLocalType> DiscountField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator OfferLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OfferLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static OfferLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OfferRules", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("OfferDescription", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Discount", "http://www.opentravel.org/OTA/2003/05")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (OfferRules*, OfferDescription*, Discount*)
                            /// </para>
                            /// </summary>
                            public OfferLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (OfferRules*, OfferDescription*, Discount*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.OffersLocalType.OfferLocalType.OfferRulesLocalType> OfferRules
                            {
                                get
                                {
                                    if ((this.OfferRulesField == null))
                                    {
                                        this.OfferRulesField = new XTypedList<OfferRulesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("OfferRules", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.OfferRulesField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.OfferRulesField = null;
                                    }
                                    else
                                    {
                                        if ((this.OfferRulesField == null))
                                        {
                                            this.OfferRulesField = XTypedList<OfferRulesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OfferRules", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<OfferRulesLocalType>(this.OfferRulesField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (OfferRules*, OfferDescription*, Discount*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.OffersLocalType.OfferLocalType.OfferDescriptionLocalType> OfferDescription
                            {
                                get
                                {
                                    if ((this.OfferDescriptionField == null))
                                    {
                                        this.OfferDescriptionField = new XTypedList<OfferDescriptionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("OfferDescription", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.OfferDescriptionField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.OfferDescriptionField = null;
                                    }
                                    else
                                    {
                                        if ((this.OfferDescriptionField == null))
                                        {
                                            this.OfferDescriptionField = XTypedList<OfferDescriptionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OfferDescription", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<OfferDescriptionLocalType>(this.OfferDescriptionField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (OfferRules*, OfferDescription*, Discount*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.OffersLocalType.OfferLocalType.DiscountLocalType> Discount
                            {
                                get
                                {
                                    if ((this.DiscountField == null))
                                    {
                                        this.DiscountField = new XTypedList<DiscountLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Discount", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.DiscountField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.DiscountField = null;
                                    }
                                    else
                                    {
                                        if ((this.DiscountField == null))
                                        {
                                            this.DiscountField = XTypedList<DiscountLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Discount", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<DiscountLocalType>(this.DiscountField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string OfferCode
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("OfferCode", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("OfferCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("Offer", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<OfferLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("OfferRules", "http://www.opentravel.org/OTA/2003/05"), typeof(OfferRulesLocalType));
                                localElementDictionary.Add(XName.Get("OfferDescription", "http://www.opentravel.org/OTA/2003/05"), typeof(OfferDescriptionLocalType));
                                localElementDictionary.Add(XName.Get("Discount", "http://www.opentravel.org/OTA/2003/05"), typeof(DiscountLocalType));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (OfferRule*)
                            /// </para>
                            /// </summary>
                            public partial class OfferRulesLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<OfferRuleLocalType> OfferRuleField;

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator OfferRulesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OfferRulesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static OfferRulesLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OfferRule", "http://www.opentravel.org/OTA/2003/05")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (OfferRule*)
                                /// </para>
                                /// </summary>
                                public OfferRulesLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (OfferRule*)
                                /// </para>
                                /// </summary>
                                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.OffersLocalType.OfferLocalType.OfferRulesLocalType.OfferRuleLocalType> OfferRule
                                {
                                    get
                                    {
                                        if ((this.OfferRuleField == null))
                                        {
                                            this.OfferRuleField = new XTypedList<OfferRuleLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("OfferRule", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.OfferRuleField;
                                    }
                                    set
                                    {
                                        if ((value == null))
                                        {
                                            this.OfferRuleField = null;
                                        }
                                        else
                                        {
                                            if ((this.OfferRuleField == null))
                                            {
                                                this.OfferRuleField = XTypedList<OfferRuleLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OfferRule", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else
                                            {
                                                XTypedServices.SetList<OfferRuleLocalType>(this.OfferRuleField, value);
                                            }
                                        }
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("OfferRules", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<OfferRulesLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("OfferRule", "http://www.opentravel.org/OTA/2003/05"), typeof(OfferRuleLocalType));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (DateRestriction*)
                                /// </para>
                                /// </summary>
                                public partial class OfferRuleLocalType : XTypedElement, IXMetaData
                                {

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private XTypedList<DateRestrictionLocalType> DateRestrictionField;

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;

                                    public static explicit operator OfferRuleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OfferRuleLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                    static OfferRuleLocalType()
                                    {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DateRestriction", "http://www.opentravel.org/OTA/2003/05")));
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (DateRestriction*)
                                    /// </para>
                                    /// </summary>
                                    public OfferRuleLocalType()
                                    {
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional, repeating
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (DateRestriction*)
                                    /// </para>
                                    /// </summary>
                                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.OffersLocalType.OfferLocalType.OfferRulesLocalType.OfferRuleLocalType.DateRestrictionLocalType> DateRestriction
                                    {
                                        get
                                        {
                                            if ((this.DateRestrictionField == null))
                                            {
                                                this.DateRestrictionField = new XTypedList<DateRestrictionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("DateRestriction", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            return this.DateRestrictionField;
                                        }
                                        set
                                        {
                                            if ((value == null))
                                            {
                                                this.DateRestrictionField = null;
                                            }
                                            else
                                            {
                                                if ((this.DateRestrictionField == null))
                                                {
                                                    this.DateRestrictionField = XTypedList<DateRestrictionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DateRestriction", "http://www.opentravel.org/OTA/2003/05"));
                                                }
                                                else
                                                {
                                                    XTypedServices.SetList<DateRestrictionLocalType>(this.DateRestrictionField, value);
                                                }
                                            }
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                    {
                                        get
                                        {
                                            return localElementDictionary;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName
                                    {
                                        get
                                        {
                                            return XName.Get("OfferRule", "http://www.opentravel.org/OTA/2003/05");
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin
                                    {
                                        get
                                        {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager
                                    {
                                        get
                                        {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }

                                    public override XTypedElement Clone()
                                    {
                                        return XTypedServices.CloneXTypedElement<OfferRuleLocalType>(this);
                                    }

                                    private static void BuildElementDictionary()
                                    {
                                        localElementDictionary.Add(XName.Get("DateRestriction", "http://www.opentravel.org/OTA/2003/05"), typeof(DateRestrictionLocalType));
                                    }

                                    ContentModelEntity IXMetaData.GetContentModel()
                                    {
                                        return contentModel;
                                    }

                                    public partial class DateRestrictionLocalType : XTypedElement, IXMetaData
                                    {

                                        public static explicit operator DateRestrictionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DateRestrictionLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                        public DateRestrictionLocalType()
                                        {
                                        }

                                        /// <summary>
                                        /// <para>
                                        /// Occurrence: optional
                                        /// </para>
                                        /// </summary>
                                        public string Start
                                        {
                                            get
                                            {
                                                XAttribute x = this.Attribute(XName.Get("Start", ""));
                                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                            set
                                            {
                                                this.SetAttribute(XName.Get("Start", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                        }

                                        /// <summary>
                                        /// <para>
                                        /// Occurrence: optional
                                        /// </para>
                                        /// </summary>
                                        public string End
                                        {
                                            get
                                            {
                                                XAttribute x = this.Attribute(XName.Get("End", ""));
                                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                            set
                                            {
                                                this.SetAttribute(XName.Get("End", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                        }

                                        /// <summary>
                                        /// <para>
                                        /// Occurrence: optional
                                        /// </para>
                                        /// </summary>
                                        public string RestrictionType
                                        {
                                            get
                                            {
                                                XAttribute x = this.Attribute(XName.Get("RestrictionType", ""));
                                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                            set
                                            {
                                                this.SetAttribute(XName.Get("RestrictionType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                        }

                                        /// <summary>
                                        /// <para>
                                        /// Occurrence: optional
                                        /// </para>
                                        /// </summary>
                                        public string RestrictionDateCode
                                        {
                                            get
                                            {
                                                XAttribute x = this.Attribute(XName.Get("RestrictionDateCode", ""));
                                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                            set
                                            {
                                                this.SetAttribute(XName.Get("RestrictionDateCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                            }
                                        }

                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        XName IXMetaData.SchemaName
                                        {
                                            get
                                            {
                                                return XName.Get("DateRestriction", "http://www.opentravel.org/OTA/2003/05");
                                            }
                                        }

                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        SchemaOrigin IXMetaData.TypeOrigin
                                        {
                                            get
                                            {
                                                return SchemaOrigin.Fragment;
                                            }
                                        }

                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        ILinqToXsdTypeManager IXMetaData.TypeManager
                                        {
                                            get
                                            {
                                                return LinqToXsdTypeManager.Instance;
                                            }
                                        }

                                        public override XTypedElement Clone()
                                        {
                                            return XTypedServices.CloneXTypedElement<DateRestrictionLocalType>(this);
                                        }

                                        ContentModelEntity IXMetaData.GetContentModel()
                                        {
                                            return ContentModelEntity.Default;
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Text?)
                            /// </para>
                            /// </summary>
                            public partial class OfferDescriptionLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator OfferDescriptionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OfferDescriptionLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static OfferDescriptionLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Text?)
                                /// </para>
                                /// </summary>
                                public OfferDescriptionLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (Text?)
                                /// </para>
                                /// </summary>
                                public string Text
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05"));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("OfferDescription", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<OfferDescriptionLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }

                            public partial class DiscountLocalType : XTypedElement, IXMetaData
                            {

                                public static explicit operator DiscountLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DiscountLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                public DiscountLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string NightsRequired
                                {
                                    get
                                    {
                                        XAttribute x = this.Attribute(XName.Get("NightsRequired", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetAttribute(XName.Get("NightsRequired", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string NightsDiscounted
                                {
                                    get
                                    {
                                        XAttribute x = this.Attribute(XName.Get("NightsDiscounted", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetAttribute(XName.Get("NightsDiscounted", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string DiscountPattern
                                {
                                    get
                                    {
                                        XAttribute x = this.Attribute(XName.Get("DiscountPattern", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetAttribute(XName.Get("DiscountPattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("Discount", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<DiscountLocalType>(this);
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return ContentModelEntity.Default;
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (SellableProduct*)
                    /// </para>
                    /// </summary>
                    public partial class SellableProductsLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<SellableProductLocalType> SellableProductField;

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator SellableProductsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SellableProductsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static SellableProductsLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SellableProduct", "http://www.opentravel.org/OTA/2003/05")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (SellableProduct*)
                        /// </para>
                        /// </summary>
                        public SellableProductsLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (SellableProduct*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelRatePlanRS.RatePlansLocalType.RatePlanLocalType.SellableProductsLocalType.SellableProductLocalType> SellableProduct
                        {
                            get
                            {
                                if ((this.SellableProductField == null))
                                {
                                    this.SellableProductField = new XTypedList<SellableProductLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("SellableProduct", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.SellableProductField;
                            }
                            set
                            {
                                if ((value == null))
                                {
                                    this.SellableProductField = null;
                                }
                                else
                                {
                                    if ((this.SellableProductField == null))
                                    {
                                        this.SellableProductField = XTypedList<SellableProductLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SellableProduct", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else
                                    {
                                        XTypedServices.SetList<SellableProductLocalType>(this.SellableProductField, value);
                                    }
                                }
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("SellableProducts", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<SellableProductsLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("SellableProduct", "http://www.opentravel.org/OTA/2003/05"), typeof(SellableProductLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        public partial class SellableProductLocalType : XTypedElement, IXMetaData
                        {

                            public static explicit operator SellableProductLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SellableProductLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            public SellableProductLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string InvCode
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("InvCode", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("InvCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("SellableProduct", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<SellableProductLocalType>(this);
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return ContentModelEntity.Default;
                            }
                        }
                    }
                }
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public BookingRules BookingRules { get { return rootObject as BookingRules; } }

            public TPA_Extensions TPA_Extensions { get { return rootObject as TPA_Extensions; } }

            public Description Description { get { return rootObject as Description; } }

            public OTA_HotelRatePlanRS OTA_HotelRatePlanRS { get { return rootObject as OTA_HotelRatePlanRS; } }

            private XRootNamespace()
            {
            }

            public XRootNamespace(BookingRules root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(TPA_Extensions root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Description root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(OTA_HotelRatePlanRS root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }
}