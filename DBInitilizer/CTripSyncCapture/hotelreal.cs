//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;
using www.opentravel.org.OTA.Item2003.Item05;



/// <summary>
/// <para>
/// Regular expression: (TPA_Extensions | Description | Header | HotelResponse)*
/// </para>
/// </summary>
public partial class Response : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions> TPA_ExtensionsField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<www.opentravel.org.OTA.Item2003.Item05.Description> DescriptionField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<HeaderLocalType> HeaderField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<HotelResponseLocalType> HotelResponseField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
         public static explicit operator Response(XElement xe) { return XTypedServices.ToXTypedElement<Response>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Response() {
        BuildElementDictionary();
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TPA_Extensions | Description | Header | HotelResponse)*
    /// </para>
    /// </summary>
    public Response() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (TPA_Extensions | Description | Header | HotelResponse)*
    /// </para>
    /// </summary>
    public IList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions> TPA_Extensions {
        get {
            if ((this.TPA_ExtensionsField == null)) {
                this.TPA_ExtensionsField = new XTypedList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
            }
            return this.TPA_ExtensionsField;
        }
        set {
            if ((value == null)) {
                this.TPA_ExtensionsField = null;
            }
            else {
                if ((this.TPA_ExtensionsField == null)) {
                    this.TPA_ExtensionsField = XTypedList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                }
                else {
                    XTypedServices.SetList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions>(this.TPA_ExtensionsField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (TPA_Extensions | Description | Header | HotelResponse)*
    /// </para>
    /// </summary>
    public IList<www.opentravel.org.OTA.Item2003.Item05.Description> Description {
        get {
            if ((this.DescriptionField == null)) {
                this.DescriptionField = new XTypedList<www.opentravel.org.OTA.Item2003.Item05.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
            }
            return this.DescriptionField;
        }
        set {
            if ((value == null)) {
                this.DescriptionField = null;
            }
            else {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = XTypedList<www.opentravel.org.OTA.Item2003.Item05.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                }
                else {
                    XTypedServices.SetList<www.opentravel.org.OTA.Item2003.Item05.Description>(this.DescriptionField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (TPA_Extensions | Description | Header | HotelResponse)*
    /// </para>
    /// </summary>
    public IList<Response.HeaderLocalType> Header {
        get {
            if ((this.HeaderField == null)) {
                this.HeaderField = new XTypedList<HeaderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Header", ""));
            }
            return this.HeaderField;
        }
        set {
            if ((value == null)) {
                this.HeaderField = null;
            }
            else {
                if ((this.HeaderField == null)) {
                    this.HeaderField = XTypedList<HeaderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Header", ""));
                }
                else {
                    XTypedServices.SetList<HeaderLocalType>(this.HeaderField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (TPA_Extensions | Description | Header | HotelResponse)*
    /// </para>
    /// </summary>
    public IList<Response.HotelResponseLocalType> HotelResponse {
        get {
            if ((this.HotelResponseField == null)) {
                this.HotelResponseField = new XTypedList<HotelResponseLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("HotelResponse", ""));
            }
            return this.HotelResponseField;
        }
        set {
            if ((value == null)) {
                this.HotelResponseField = null;
            }
            else {
                if ((this.HotelResponseField == null)) {
                    this.HotelResponseField = XTypedList<HotelResponseLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HotelResponse", ""));
                }
                else {
                    XTypedServices.SetList<HotelResponseLocalType>(this.HotelResponseField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Response", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Response Load(string xmlFile) {
        return XTypedServices.Load<Response>(xmlFile);
    }
    
    public static Response Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Response>(xmlFile);
    }
    
    public static Response Parse(string xml) {
        return XTypedServices.Parse<Response>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Response>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions));
        localElementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(www.opentravel.org.OTA.Item2003.Item05.Description));
        localElementDictionary.Add(XName.Get("Header", ""), typeof(HeaderLocalType));
        localElementDictionary.Add(XName.Get("HotelResponse", ""), typeof(HotelResponseLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
    
    public partial class HeaderLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator HeaderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HeaderLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HeaderLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShouldRecordPerformanceTime {
            get {
                XAttribute x = this.Attribute(XName.Get("ShouldRecordPerformanceTime", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShouldRecordPerformanceTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Timestamp {
            get {
                XAttribute x = this.Attribute(XName.Get("Timestamp", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Timestamp", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReferenceID {
            get {
                XAttribute x = this.Attribute(XName.Get("ReferenceID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReferenceID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RecentlyTime {
            get {
                XAttribute x = this.Attribute(XName.Get("RecentlyTime", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RecentlyTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AccessCount {
            get {
                XAttribute x = this.Attribute(XName.Get("AccessCount", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AccessCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CurrentCount {
            get {
                XAttribute x = this.Attribute(XName.Get("CurrentCount", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CurrentCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ResetTime {
            get {
                XAttribute x = this.Attribute(XName.Get("ResetTime", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ResetTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ResultCode {
            get {
                XAttribute x = this.Attribute(XName.Get("ResultCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ResultCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Header", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HeaderLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (OTA_HotelDescriptiveInfoRS)
    /// </para>
    /// </summary>
    public partial class HotelResponseLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HotelResponseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HotelResponseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HotelResponseLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OTA_HotelDescriptiveInfoRS", "http://www.opentravel.org/OTA/2003/05")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OTA_HotelDescriptiveInfoRS)
        /// </para>
        /// </summary>
        public HotelResponseLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OTA_HotelDescriptiveInfoRS)
        /// </para>
        /// </summary>
        public www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS OTA_HotelDescriptiveInfoRS {
            get {
                XElement x = this.GetElement(XName.Get("OTA_HotelDescriptiveInfoRS", "http://www.opentravel.org/OTA/2003/05"));
                return ((www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS)(x));
            }
            set {
                this.SetElement(XName.Get("OTA_HotelDescriptiveInfoRS", "http://www.opentravel.org/OTA/2003/05"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HotelResponse", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HotelResponseLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("OTA_HotelDescriptiveInfoRS", "http://www.opentravel.org/OTA/2003/05"), typeof(www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}

public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
    
    static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
    
    private static XmlSchemaSet schemaSet;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
    
    static LinqToXsdTypeManager() {
        BuildElementDictionary();
    }
    
    XmlSchemaSet ILinqToXsdTypeManager.Schemas {
        get {
            if ((schemaSet == null)) {
                XmlSchemaSet tempSet = new XmlSchemaSet();
                System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
            }
            return schemaSet;
        }
        set {
            schemaSet = value;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
        get {
            return XTypedServices.EmptyDictionary;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
        get {
            return elementDictionary;
        }
    }
    
    Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
        get {
            return XTypedServices.EmptyTypeMappingDictionary;
        }
    }
    
    public static LinqToXsdTypeManager Instance {
        get {
            return typeManagerSingleton;
        }
    }
    
    private static void BuildElementDictionary() {
        elementDictionary.Add(XName.Get("Response", ""), typeof(global::Response));
        elementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(global::www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions));
        elementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(global::www.opentravel.org.OTA.Item2003.Item05.Description));
        elementDictionary.Add(XName.Get("OTA_HotelDescriptiveInfoRS", "http://www.opentravel.org/OTA/2003/05"), typeof(global::www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS));
    }
    
    protected internal static void AddSchemas(XmlSchemaSet schemas) {
        schemas.Add(schemaSet);
    }
    
    public static System.Type GetRootType() {
        return elementDictionary[XName.Get("Response", "")];
    }
}

public partial class XRootNamespace {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public Response Response {  get {return rootObject as Response; } }
    
    private XRootNamespace() {
    }
    
    public XRootNamespace(Response root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRootNamespace Load(string xmlFile) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(string xmlFile, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(XmlReader xmlReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

public partial class XRoot {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public Response Response {  get {return rootObject as Response; } }

    public global::www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions TPA_Extensions {  get {return rootObject as global::www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions; } }

    public global::www.opentravel.org.OTA.Item2003.Item05.Description Description {  get {return rootObject as global::www.opentravel.org.OTA.Item2003.Item05.Description; } }

    public global::www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS OTA_HotelDescriptiveInfoRS {  get {return rootObject as global::www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS; } }
    
    private XRoot() {
    }
    
    public XRoot(Response root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(global::www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(global::www.opentravel.org.OTA.Item2003.Item05.Description root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(global::www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRoot Load(string xmlFile) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(string xmlFile, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(XmlReader xmlReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}
namespace www.opentravel.org.OTA.Item2003.Item05 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (InvBlockCode?, Roomquantity?, RoadCross*, TPA_Extension*, CityImportantMessage*)
    /// </para>
    /// </summary>
    public partial class TPA_Extensions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RoadCrossLocalType> RoadCrossField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TPA_ExtensionLocalType> TPA_ExtensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CityImportantMessageLocalType> CityImportantMessageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TPA_Extensions(XElement xe) { return XTypedServices.ToXTypedElement<TPA_Extensions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TPA_Extensions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("InvBlockCode", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Roomquantity", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("RoadCross", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("TPA_Extension", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("CityImportantMessage", "http://www.opentravel.org/OTA/2003/05")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (InvBlockCode?, Roomquantity?, RoadCross*, TPA_Extension*, CityImportantMessage*)
        /// </para>
        /// </summary>
        public TPA_Extensions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (InvBlockCode?, Roomquantity?, RoadCross*, TPA_Extension*, CityImportantMessage*)
        /// </para>
        /// </summary>
        public string InvBlockCode {
            get {
                XElement x = this.GetElement(XName.Get("InvBlockCode", "http://www.opentravel.org/OTA/2003/05"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("InvBlockCode", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (InvBlockCode?, Roomquantity?, RoadCross*, TPA_Extension*, CityImportantMessage*)
        /// </para>
        /// </summary>
        public string Roomquantity {
            get {
                XElement x = this.GetElement(XName.Get("Roomquantity", "http://www.opentravel.org/OTA/2003/05"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Roomquantity", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (InvBlockCode?, Roomquantity?, RoadCross*, TPA_Extension*, CityImportantMessage*)
        /// </para>
        /// </summary>
        public IList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions.RoadCrossLocalType> RoadCross {
            get {
                if ((this.RoadCrossField == null)) {
                    this.RoadCrossField = new XTypedList<RoadCrossLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("RoadCross", "http://www.opentravel.org/OTA/2003/05"));
                }
                return this.RoadCrossField;
            }
            set {
                if ((value == null)) {
                    this.RoadCrossField = null;
                }
                else {
                    if ((this.RoadCrossField == null)) {
                        this.RoadCrossField = XTypedList<RoadCrossLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RoadCross", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    else {
                        XTypedServices.SetList<RoadCrossLocalType>(this.RoadCrossField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (InvBlockCode?, Roomquantity?, RoadCross*, TPA_Extension*, CityImportantMessage*)
        /// </para>
        /// </summary>
        public IList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions.TPA_ExtensionLocalType> TPA_Extension {
            get {
                if ((this.TPA_ExtensionField == null)) {
                    this.TPA_ExtensionField = new XTypedList<TPA_ExtensionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extension", "http://www.opentravel.org/OTA/2003/05"));
                }
                return this.TPA_ExtensionField;
            }
            set {
                if ((value == null)) {
                    this.TPA_ExtensionField = null;
                }
                else {
                    if ((this.TPA_ExtensionField == null)) {
                        this.TPA_ExtensionField = XTypedList<TPA_ExtensionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extension", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    else {
                        XTypedServices.SetList<TPA_ExtensionLocalType>(this.TPA_ExtensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (InvBlockCode?, Roomquantity?, RoadCross*, TPA_Extension*, CityImportantMessage*)
        /// </para>
        /// </summary>
        public IList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions.CityImportantMessageLocalType> CityImportantMessage {
            get {
                if ((this.CityImportantMessageField == null)) {
                    this.CityImportantMessageField = new XTypedList<CityImportantMessageLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("CityImportantMessage", "http://www.opentravel.org/OTA/2003/05"));
                }
                return this.CityImportantMessageField;
            }
            set {
                if ((value == null)) {
                    this.CityImportantMessageField = null;
                }
                else {
                    if ((this.CityImportantMessageField == null)) {
                        this.CityImportantMessageField = XTypedList<CityImportantMessageLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CityImportantMessage", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    else {
                        XTypedServices.SetList<CityImportantMessageLocalType>(this.CityImportantMessageField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TPA_Extensions Load(string xmlFile) {
            return XTypedServices.Load<TPA_Extensions>(xmlFile);
        }
        
        public static TPA_Extensions Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TPA_Extensions>(xmlFile);
        }
        
        public static TPA_Extensions Parse(string xml) {
            return XTypedServices.Parse<TPA_Extensions>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TPA_Extensions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("InvBlockCode", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
            localElementDictionary.Add(XName.Get("Roomquantity", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
            localElementDictionary.Add(XName.Get("RoadCross", "http://www.opentravel.org/OTA/2003/05"), typeof(RoadCrossLocalType));
            localElementDictionary.Add(XName.Get("TPA_Extension", "http://www.opentravel.org/OTA/2003/05"), typeof(TPA_ExtensionLocalType));
            localElementDictionary.Add(XName.Get("CityImportantMessage", "http://www.opentravel.org/OTA/2003/05"), typeof(CityImportantMessageLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class RoadCrossLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator RoadCrossLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RoadCrossLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public RoadCrossLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string DescriptionText {
                get {
                    XAttribute x = this.Attribute(XName.Get("DescriptionText", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("DescriptionText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("RoadCross", "http://www.opentravel.org/OTA/2003/05");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<RoadCrossLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FacilityName?, FTypeName?, FacilityValue?)
        /// </para>
        /// </summary>
        public partial class TPA_ExtensionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator TPA_ExtensionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TPA_ExtensionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static TPA_ExtensionLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FacilityName", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("FTypeName", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("FacilityValue", "http://www.opentravel.org/OTA/2003/05")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (FacilityName?, FTypeName?, FacilityValue?)
            /// </para>
            /// </summary>
            public TPA_ExtensionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (FacilityName?, FTypeName?, FacilityValue?)
            /// </para>
            /// </summary>
            public string FacilityName {
                get {
                    XElement x = this.GetElement(XName.Get("FacilityName", "http://www.opentravel.org/OTA/2003/05"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("FacilityName", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (FacilityName?, FTypeName?, FacilityValue?)
            /// </para>
            /// </summary>
            public string FTypeName {
                get {
                    XElement x = this.GetElement(XName.Get("FTypeName", "http://www.opentravel.org/OTA/2003/05"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("FTypeName", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (FacilityName?, FTypeName?, FacilityValue?)
            /// </para>
            /// </summary>
            public string FacilityValue {
                get {
                    XElement x = this.GetElement(XName.Get("FacilityValue", "http://www.opentravel.org/OTA/2003/05"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("FacilityValue", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("TPA_Extension", "http://www.opentravel.org/OTA/2003/05");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<TPA_ExtensionLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("FacilityName", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                localElementDictionary.Add(XName.Get("FTypeName", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                localElementDictionary.Add(XName.Get("FacilityValue", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CityImportantMessageType*)
        /// </para>
        /// </summary>
        public partial class CityImportantMessageLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CityImportantMessageTypeLocalType> CityImportantMessageTypeField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator CityImportantMessageLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CityImportantMessageLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CityImportantMessageLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CityImportantMessageType", "http://www.opentravel.org/OTA/2003/05")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CityImportantMessageType*)
            /// </para>
            /// </summary>
            public CityImportantMessageLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (CityImportantMessageType*)
            /// </para>
            /// </summary>
            public IList<www.opentravel.org.OTA.Item2003.Item05.TPA_Extensions.CityImportantMessageLocalType.CityImportantMessageTypeLocalType> CityImportantMessageType {
                get {
                    if ((this.CityImportantMessageTypeField == null)) {
                        this.CityImportantMessageTypeField = new XTypedList<CityImportantMessageTypeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("CityImportantMessageType", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    return this.CityImportantMessageTypeField;
                }
                set {
                    if ((value == null)) {
                        this.CityImportantMessageTypeField = null;
                    }
                    else {
                        if ((this.CityImportantMessageTypeField == null)) {
                            this.CityImportantMessageTypeField = XTypedList<CityImportantMessageTypeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CityImportantMessageType", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        else {
                            XTypedServices.SetList<CityImportantMessageTypeLocalType>(this.CityImportantMessageTypeField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("CityImportantMessage", "http://www.opentravel.org/OTA/2003/05");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CityImportantMessageLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("CityImportantMessageType", "http://www.opentravel.org/OTA/2003/05"), typeof(CityImportantMessageTypeLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (MessageContent?)
            /// </para>
            /// </summary>
            public partial class CityImportantMessageTypeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator CityImportantMessageTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CityImportantMessageTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static CityImportantMessageTypeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageContent", "http://www.opentravel.org/OTA/2003/05")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (MessageContent?)
                /// </para>
                /// </summary>
                public CityImportantMessageTypeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (MessageContent?)
                /// </para>
                /// </summary>
                public string MessageContent {
                    get {
                        XElement x = this.GetElement(XName.Get("MessageContent", "http://www.opentravel.org/OTA/2003/05"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("MessageContent", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string StartDate {
                    get {
                        XAttribute x = this.Attribute(XName.Get("StartDate", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("StartDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string EndDate {
                    get {
                        XAttribute x = this.Attribute(XName.Get("EndDate", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("EndDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("CityImportantMessageType", "http://www.opentravel.org/OTA/2003/05");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<CityImportantMessageTypeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("MessageContent", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Text?)
    /// </para>
    /// </summary>
    public partial class Description : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Description(XElement xe) { return XTypedServices.ToXTypedElement<Description>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Description() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Text?)
        /// </para>
        /// </summary>
        public Description() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Text?)
        /// </para>
        /// </summary>
        public string Text {
            get {
                XElement x = this.GetElement(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Caption {
            get {
                XAttribute x = this.Attribute(XName.Get("Caption", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Description", "http://www.opentravel.org/OTA/2003/05");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Description Load(string xmlFile) {
            return XTypedServices.Load<Description>(xmlFile);
        }
        
        public static Description Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Description>(xmlFile);
        }
        
        public static Description Parse(string xml) {
            return XTypedServices.Parse<Description>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Description>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Text", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Success?, HotelDescriptiveContents*)
    /// </para>
    /// </summary>
    public partial class OTA_HotelDescriptiveInfoRS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HotelDescriptiveContentsLocalType> HotelDescriptiveContentsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OTA_HotelDescriptiveInfoRS(XElement xe) { return XTypedServices.ToXTypedElement<OTA_HotelDescriptiveInfoRS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OTA_HotelDescriptiveInfoRS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Success", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("HotelDescriptiveContents", "http://www.opentravel.org/OTA/2003/05")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Success?, HotelDescriptiveContents*)
        /// </para>
        /// </summary>
        public OTA_HotelDescriptiveInfoRS() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Success?, HotelDescriptiveContents*)
        /// </para>
        /// </summary>
        public string Success {
            get {
                XElement x = this.GetElement(XName.Get("Success", "http://www.opentravel.org/OTA/2003/05"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Success", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Success?, HotelDescriptiveContents*)
        /// </para>
        /// </summary>
        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType> HotelDescriptiveContents {
            get {
                if ((this.HotelDescriptiveContentsField == null)) {
                    this.HotelDescriptiveContentsField = new XTypedList<HotelDescriptiveContentsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("HotelDescriptiveContents", "http://www.opentravel.org/OTA/2003/05"));
                }
                return this.HotelDescriptiveContentsField;
            }
            set {
                if ((value == null)) {
                    this.HotelDescriptiveContentsField = null;
                }
                else {
                    if ((this.HotelDescriptiveContentsField == null)) {
                        this.HotelDescriptiveContentsField = XTypedList<HotelDescriptiveContentsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HotelDescriptiveContents", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    else {
                        XTypedServices.SetList<HotelDescriptiveContentsLocalType>(this.HotelDescriptiveContentsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TimeStamp {
            get {
                XAttribute x = this.Attribute(XName.Get("TimeStamp", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TimeStamp", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrimaryLangID {
            get {
                XAttribute x = this.Attribute(XName.Get("PrimaryLangID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PrimaryLangID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OTA_HotelDescriptiveInfoRS", "http://www.opentravel.org/OTA/2003/05");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OTA_HotelDescriptiveInfoRS Load(string xmlFile) {
            return XTypedServices.Load<OTA_HotelDescriptiveInfoRS>(xmlFile);
        }
        
        public static OTA_HotelDescriptiveInfoRS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OTA_HotelDescriptiveInfoRS>(xmlFile);
        }
        
        public static OTA_HotelDescriptiveInfoRS Parse(string xml) {
            return XTypedServices.Parse<OTA_HotelDescriptiveInfoRS>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OTA_HotelDescriptiveInfoRS>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Success", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
            localElementDictionary.Add(XName.Get("HotelDescriptiveContents", "http://www.opentravel.org/OTA/2003/05"), typeof(HotelDescriptiveContentsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HotelDescriptiveContent*)
        /// </para>
        /// </summary>
        public partial class HotelDescriptiveContentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<HotelDescriptiveContentLocalType> HotelDescriptiveContentField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator HotelDescriptiveContentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HotelDescriptiveContentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static HotelDescriptiveContentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("HotelDescriptiveContent", "http://www.opentravel.org/OTA/2003/05")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (HotelDescriptiveContent*)
            /// </para>
            /// </summary>
            public HotelDescriptiveContentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (HotelDescriptiveContent*)
            /// </para>
            /// </summary>
            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType> HotelDescriptiveContent {
                get {
                    if ((this.HotelDescriptiveContentField == null)) {
                        this.HotelDescriptiveContentField = new XTypedList<HotelDescriptiveContentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("HotelDescriptiveContent", "http://www.opentravel.org/OTA/2003/05"));
                    }
                    return this.HotelDescriptiveContentField;
                }
                set {
                    if ((value == null)) {
                        this.HotelDescriptiveContentField = null;
                    }
                    else {
                        if ((this.HotelDescriptiveContentField == null)) {
                            this.HotelDescriptiveContentField = XTypedList<HotelDescriptiveContentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HotelDescriptiveContent", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        else {
                            XTypedServices.SetList<HotelDescriptiveContentLocalType>(this.HotelDescriptiveContentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("HotelDescriptiveContents", "http://www.opentravel.org/OTA/2003/05");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<HotelDescriptiveContentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("HotelDescriptiveContent", "http://www.opentravel.org/OTA/2003/05"), typeof(HotelDescriptiveContentLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (HotelInfo*, FacilityInfo*, Policies*, AreaInfo*, AffiliationInfo*, MultimediaDescriptions*, TPA_Extensions*)
            /// </para>
            /// </summary>
            public partial class HotelDescriptiveContentLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<HotelInfoLocalType> HotelInfoField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<FacilityInfoLocalType> FacilityInfoField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<PoliciesLocalType> PoliciesField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<AreaInfoLocalType> AreaInfoField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<AffiliationInfoLocalType> AffiliationInfoField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<MultimediaDescriptionsLocalType> MultimediaDescriptionsField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<TPA_Extensions> TPA_ExtensionsField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator HotelDescriptiveContentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HotelDescriptiveContentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static HotelDescriptiveContentLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("HotelInfo", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("FacilityInfo", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Policies", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("AreaInfo", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("AffiliationInfo", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("MultimediaDescriptions", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (HotelInfo*, FacilityInfo*, Policies*, AreaInfo*, AffiliationInfo*, MultimediaDescriptions*, TPA_Extensions*)
                /// </para>
                /// </summary>
                public HotelDescriptiveContentLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (HotelInfo*, FacilityInfo*, Policies*, AreaInfo*, AffiliationInfo*, MultimediaDescriptions*, TPA_Extensions*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.HotelInfoLocalType> HotelInfo {
                    get {
                        if ((this.HotelInfoField == null)) {
                            this.HotelInfoField = new XTypedList<HotelInfoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("HotelInfo", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.HotelInfoField;
                    }
                    set {
                        if ((value == null)) {
                            this.HotelInfoField = null;
                        }
                        else {
                            if ((this.HotelInfoField == null)) {
                                this.HotelInfoField = XTypedList<HotelInfoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HotelInfo", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else {
                                XTypedServices.SetList<HotelInfoLocalType>(this.HotelInfoField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (HotelInfo*, FacilityInfo*, Policies*, AreaInfo*, AffiliationInfo*, MultimediaDescriptions*, TPA_Extensions*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.FacilityInfoLocalType> FacilityInfo {
                    get {
                        if ((this.FacilityInfoField == null)) {
                            this.FacilityInfoField = new XTypedList<FacilityInfoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("FacilityInfo", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.FacilityInfoField;
                    }
                    set {
                        if ((value == null)) {
                            this.FacilityInfoField = null;
                        }
                        else {
                            if ((this.FacilityInfoField == null)) {
                                this.FacilityInfoField = XTypedList<FacilityInfoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FacilityInfo", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else {
                                XTypedServices.SetList<FacilityInfoLocalType>(this.FacilityInfoField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (HotelInfo*, FacilityInfo*, Policies*, AreaInfo*, AffiliationInfo*, MultimediaDescriptions*, TPA_Extensions*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.PoliciesLocalType> Policies {
                    get {
                        if ((this.PoliciesField == null)) {
                            this.PoliciesField = new XTypedList<PoliciesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Policies", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.PoliciesField;
                    }
                    set {
                        if ((value == null)) {
                            this.PoliciesField = null;
                        }
                        else {
                            if ((this.PoliciesField == null)) {
                                this.PoliciesField = XTypedList<PoliciesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Policies", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else {
                                XTypedServices.SetList<PoliciesLocalType>(this.PoliciesField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (HotelInfo*, FacilityInfo*, Policies*, AreaInfo*, AffiliationInfo*, MultimediaDescriptions*, TPA_Extensions*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.AreaInfoLocalType> AreaInfo {
                    get {
                        if ((this.AreaInfoField == null)) {
                            this.AreaInfoField = new XTypedList<AreaInfoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("AreaInfo", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.AreaInfoField;
                    }
                    set {
                        if ((value == null)) {
                            this.AreaInfoField = null;
                        }
                        else {
                            if ((this.AreaInfoField == null)) {
                                this.AreaInfoField = XTypedList<AreaInfoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AreaInfo", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else {
                                XTypedServices.SetList<AreaInfoLocalType>(this.AreaInfoField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (HotelInfo*, FacilityInfo*, Policies*, AreaInfo*, AffiliationInfo*, MultimediaDescriptions*, TPA_Extensions*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.AffiliationInfoLocalType> AffiliationInfo {
                    get {
                        if ((this.AffiliationInfoField == null)) {
                            this.AffiliationInfoField = new XTypedList<AffiliationInfoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("AffiliationInfo", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.AffiliationInfoField;
                    }
                    set {
                        if ((value == null)) {
                            this.AffiliationInfoField = null;
                        }
                        else {
                            if ((this.AffiliationInfoField == null)) {
                                this.AffiliationInfoField = XTypedList<AffiliationInfoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AffiliationInfo", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else {
                                XTypedServices.SetList<AffiliationInfoLocalType>(this.AffiliationInfoField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (HotelInfo*, FacilityInfo*, Policies*, AreaInfo*, AffiliationInfo*, MultimediaDescriptions*, TPA_Extensions*)
                /// </para>
                /// </summary>
                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.MultimediaDescriptionsLocalType> MultimediaDescriptions {
                    get {
                        if ((this.MultimediaDescriptionsField == null)) {
                            this.MultimediaDescriptionsField = new XTypedList<MultimediaDescriptionsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("MultimediaDescriptions", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.MultimediaDescriptionsField;
                    }
                    set {
                        if ((value == null)) {
                            this.MultimediaDescriptionsField = null;
                        }
                        else {
                            if ((this.MultimediaDescriptionsField == null)) {
                                this.MultimediaDescriptionsField = XTypedList<MultimediaDescriptionsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MultimediaDescriptions", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else {
                                XTypedServices.SetList<MultimediaDescriptionsLocalType>(this.MultimediaDescriptionsField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (HotelInfo*, FacilityInfo*, Policies*, AreaInfo*, AffiliationInfo*, MultimediaDescriptions*, TPA_Extensions*)
                /// </para>
                /// </summary>
                public IList<TPA_Extensions> TPA_Extensions {
                    get {
                        if ((this.TPA_ExtensionsField == null)) {
                            this.TPA_ExtensionsField = new XTypedList<TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                        }
                        return this.TPA_ExtensionsField;
                    }
                    set {
                        if ((value == null)) {
                            this.TPA_ExtensionsField = null;
                        }
                        else {
                            if ((this.TPA_ExtensionsField == null)) {
                                this.TPA_ExtensionsField = XTypedList<TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            else {
                                XTypedServices.SetList<TPA_Extensions>(this.TPA_ExtensionsField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string BrandCode {
                    get {
                        XAttribute x = this.Attribute(XName.Get("BrandCode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("BrandCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string HotelCode {
                    get {
                        XAttribute x = this.Attribute(XName.Get("HotelCode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("HotelCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string HotelCityCode {
                    get {
                        XAttribute x = this.Attribute(XName.Get("HotelCityCode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("HotelCityCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string HotelName {
                    get {
                        XAttribute x = this.Attribute(XName.Get("HotelName", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("HotelName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string AreaID {
                    get {
                        XAttribute x = this.Attribute(XName.Get("AreaID", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("AreaID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("HotelDescriptiveContent", "http://www.opentravel.org/OTA/2003/05");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<HotelDescriptiveContentLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("HotelInfo", "http://www.opentravel.org/OTA/2003/05"), typeof(HotelInfoLocalType));
                    localElementDictionary.Add(XName.Get("FacilityInfo", "http://www.opentravel.org/OTA/2003/05"), typeof(FacilityInfoLocalType));
                    localElementDictionary.Add(XName.Get("Policies", "http://www.opentravel.org/OTA/2003/05"), typeof(PoliciesLocalType));
                    localElementDictionary.Add(XName.Get("AreaInfo", "http://www.opentravel.org/OTA/2003/05"), typeof(AreaInfoLocalType));
                    localElementDictionary.Add(XName.Get("AffiliationInfo", "http://www.opentravel.org/OTA/2003/05"), typeof(AffiliationInfoLocalType));
                    localElementDictionary.Add(XName.Get("MultimediaDescriptions", "http://www.opentravel.org/OTA/2003/05"), typeof(MultimediaDescriptionsLocalType));
                    localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(TPA_Extensions));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (CategoryCodes*, Position*, Address*, Services*)
                /// </para>
                /// </summary>
                public partial class HotelInfoLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<CategoryCodesLocalType> CategoryCodesField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<PositionLocalType> PositionField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<AddressLocalType> AddressField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<ServicesLocalType> ServicesField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator HotelInfoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HotelInfoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static HotelInfoLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CategoryCodes", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Position", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Address", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Services", "http://www.opentravel.org/OTA/2003/05")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (CategoryCodes*, Position*, Address*, Services*)
                    /// </para>
                    /// </summary>
                    public HotelInfoLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (CategoryCodes*, Position*, Address*, Services*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.HotelInfoLocalType.CategoryCodesLocalType> CategoryCodes {
                        get {
                            if ((this.CategoryCodesField == null)) {
                                this.CategoryCodesField = new XTypedList<CategoryCodesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("CategoryCodes", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.CategoryCodesField;
                        }
                        set {
                            if ((value == null)) {
                                this.CategoryCodesField = null;
                            }
                            else {
                                if ((this.CategoryCodesField == null)) {
                                    this.CategoryCodesField = XTypedList<CategoryCodesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CategoryCodes", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else {
                                    XTypedServices.SetList<CategoryCodesLocalType>(this.CategoryCodesField, value);
                                }
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (CategoryCodes*, Position*, Address*, Services*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.HotelInfoLocalType.PositionLocalType> Position {
                        get {
                            if ((this.PositionField == null)) {
                                this.PositionField = new XTypedList<PositionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Position", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.PositionField;
                        }
                        set {
                            if ((value == null)) {
                                this.PositionField = null;
                            }
                            else {
                                if ((this.PositionField == null)) {
                                    this.PositionField = XTypedList<PositionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Position", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else {
                                    XTypedServices.SetList<PositionLocalType>(this.PositionField, value);
                                }
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (CategoryCodes*, Position*, Address*, Services*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.HotelInfoLocalType.AddressLocalType> Address {
                        get {
                            if ((this.AddressField == null)) {
                                this.AddressField = new XTypedList<AddressLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Address", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.AddressField;
                        }
                        set {
                            if ((value == null)) {
                                this.AddressField = null;
                            }
                            else {
                                if ((this.AddressField == null)) {
                                    this.AddressField = XTypedList<AddressLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Address", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else {
                                    XTypedServices.SetList<AddressLocalType>(this.AddressField, value);
                                }
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (CategoryCodes*, Position*, Address*, Services*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.HotelInfoLocalType.ServicesLocalType> Services {
                        get {
                            if ((this.ServicesField == null)) {
                                this.ServicesField = new XTypedList<ServicesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Services", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.ServicesField;
                        }
                        set {
                            if ((value == null)) {
                                this.ServicesField = null;
                            }
                            else {
                                if ((this.ServicesField == null)) {
                                    this.ServicesField = XTypedList<ServicesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Services", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else {
                                    XTypedServices.SetList<ServicesLocalType>(this.ServicesField, value);
                                }
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string WhenBuilt {
                        get {
                            XAttribute x = this.Attribute(XName.Get("WhenBuilt", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("WhenBuilt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string LastUpdated {
                        get {
                            XAttribute x = this.Attribute(XName.Get("LastUpdated", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("LastUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("HotelInfo", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<HotelInfoLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("CategoryCodes", "http://www.opentravel.org/OTA/2003/05"), typeof(CategoryCodesLocalType));
                        localElementDictionary.Add(XName.Get("Position", "http://www.opentravel.org/OTA/2003/05"), typeof(PositionLocalType));
                        localElementDictionary.Add(XName.Get("Address", "http://www.opentravel.org/OTA/2003/05"), typeof(AddressLocalType));
                        localElementDictionary.Add(XName.Get("Services", "http://www.opentravel.org/OTA/2003/05"), typeof(ServicesLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (SegmentCategory*)
                    /// </para>
                    /// </summary>
                    public partial class CategoryCodesLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<SegmentCategoryLocalType> SegmentCategoryField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator CategoryCodesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CategoryCodesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static CategoryCodesLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SegmentCategory", "http://www.opentravel.org/OTA/2003/05")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (SegmentCategory*)
                        /// </para>
                        /// </summary>
                        public CategoryCodesLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (SegmentCategory*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.HotelInfoLocalType.CategoryCodesLocalType.SegmentCategoryLocalType> SegmentCategory {
                            get {
                                if ((this.SegmentCategoryField == null)) {
                                    this.SegmentCategoryField = new XTypedList<SegmentCategoryLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("SegmentCategory", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.SegmentCategoryField;
                            }
                            set {
                                if ((value == null)) {
                                    this.SegmentCategoryField = null;
                                }
                                else {
                                    if ((this.SegmentCategoryField == null)) {
                                        this.SegmentCategoryField = XTypedList<SegmentCategoryLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SegmentCategory", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<SegmentCategoryLocalType>(this.SegmentCategoryField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("CategoryCodes", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<CategoryCodesLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("SegmentCategory", "http://www.opentravel.org/OTA/2003/05"), typeof(SegmentCategoryLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        public partial class SegmentCategoryLocalType : XTypedElement, IXMetaData {
                            
         public static explicit operator SegmentCategoryLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SegmentCategoryLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            public SegmentCategoryLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Code {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("Code", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("SegmentCategory", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<SegmentCategoryLocalType>(this);
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return ContentModelEntity.Default;
                            }
                        }
                    }
                    
                    public partial class PositionLocalType : XTypedElement, IXMetaData {
                        
         public static explicit operator PositionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PositionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        public PositionLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string Latitude {
                            get {
                                XAttribute x = this.Attribute(XName.Get("Latitude", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetAttribute(XName.Get("Latitude", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string Longitude {
                            get {
                                XAttribute x = this.Attribute(XName.Get("Longitude", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetAttribute(XName.Get("Longitude", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string PositionTypeCode {
                            get {
                                XAttribute x = this.Attribute(XName.Get("PositionTypeCode", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetAttribute(XName.Get("PositionTypeCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("Position", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<PositionLocalType>(this);
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return ContentModelEntity.Default;
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (AddressLine?, CityName?, PostalCode?, Zone*, TPA_Extensions*)
                    /// </para>
                    /// </summary>
                    public partial class AddressLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<ZoneLocalType> ZoneField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<TPA_Extensions> TPA_ExtensionsField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator AddressLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AddressLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static AddressLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AddressLine", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("CityName", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("PostalCode", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Zone", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (AddressLine?, CityName?, PostalCode?, Zone*, TPA_Extensions*)
                        /// </para>
                        /// </summary>
                        public AddressLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (AddressLine?, CityName?, PostalCode?, Zone*, TPA_Extensions*)
                        /// </para>
                        /// </summary>
                        public string AddressLine {
                            get {
                                XElement x = this.GetElement(XName.Get("AddressLine", "http://www.opentravel.org/OTA/2003/05"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("AddressLine", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (AddressLine?, CityName?, PostalCode?, Zone*, TPA_Extensions*)
                        /// </para>
                        /// </summary>
                        public string CityName {
                            get {
                                XElement x = this.GetElement(XName.Get("CityName", "http://www.opentravel.org/OTA/2003/05"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("CityName", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (AddressLine?, CityName?, PostalCode?, Zone*, TPA_Extensions*)
                        /// </para>
                        /// </summary>
                        public string PostalCode {
                            get {
                                XElement x = this.GetElement(XName.Get("PostalCode", "http://www.opentravel.org/OTA/2003/05"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("PostalCode", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (AddressLine?, CityName?, PostalCode?, Zone*, TPA_Extensions*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.HotelInfoLocalType.AddressLocalType.ZoneLocalType> Zone {
                            get {
                                if ((this.ZoneField == null)) {
                                    this.ZoneField = new XTypedList<ZoneLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Zone", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.ZoneField;
                            }
                            set {
                                if ((value == null)) {
                                    this.ZoneField = null;
                                }
                                else {
                                    if ((this.ZoneField == null)) {
                                        this.ZoneField = XTypedList<ZoneLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Zone", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<ZoneLocalType>(this.ZoneField, value);
                                    }
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (AddressLine?, CityName?, PostalCode?, Zone*, TPA_Extensions*)
                        /// </para>
                        /// </summary>
                        public IList<TPA_Extensions> TPA_Extensions {
                            get {
                                if ((this.TPA_ExtensionsField == null)) {
                                    this.TPA_ExtensionsField = new XTypedList<TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.TPA_ExtensionsField;
                            }
                            set {
                                if ((value == null)) {
                                    this.TPA_ExtensionsField = null;
                                }
                                else {
                                    if ((this.TPA_ExtensionsField == null)) {
                                        this.TPA_ExtensionsField = XTypedList<TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<TPA_Extensions>(this.TPA_ExtensionsField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("Address", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<AddressLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("AddressLine", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                            localElementDictionary.Add(XName.Get("CityName", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                            localElementDictionary.Add(XName.Get("PostalCode", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                            localElementDictionary.Add(XName.Get("Zone", "http://www.opentravel.org/OTA/2003/05"), typeof(ZoneLocalType));
                            localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(TPA_Extensions));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ZoneCode?, ZoneName?)
                        /// </para>
                        /// </summary>
                        public partial class ZoneLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
         public static explicit operator ZoneLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ZoneLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static ZoneLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ZoneCode", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("ZoneName", "http://www.opentravel.org/OTA/2003/05")));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (ZoneCode?, ZoneName?)
                            /// </para>
                            /// </summary>
                            public ZoneLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (ZoneCode?, ZoneName?)
                            /// </para>
                            /// </summary>
                            public string ZoneCode {
                                get {
                                    XElement x = this.GetElement(XName.Get("ZoneCode", "http://www.opentravel.org/OTA/2003/05"));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetElement(XName.Get("ZoneCode", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (ZoneCode?, ZoneName?)
                            /// </para>
                            /// </summary>
                            public string ZoneName {
                                get {
                                    XElement x = this.GetElement(XName.Get("ZoneName", "http://www.opentravel.org/OTA/2003/05"));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetElement(XName.Get("ZoneName", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("Zone", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<ZoneLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(XName.Get("ZoneCode", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                                localElementDictionary.Add(XName.Get("ZoneName", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Service*)
                    /// </para>
                    /// </summary>
                    public partial class ServicesLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<ServiceLocalType> ServiceField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator ServicesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ServicesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static ServicesLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Service", "http://www.opentravel.org/OTA/2003/05")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (Service*)
                        /// </para>
                        /// </summary>
                        public ServicesLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (Service*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.HotelInfoLocalType.ServicesLocalType.ServiceLocalType> Service {
                            get {
                                if ((this.ServiceField == null)) {
                                    this.ServiceField = new XTypedList<ServiceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Service", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.ServiceField;
                            }
                            set {
                                if ((value == null)) {
                                    this.ServiceField = null;
                                }
                                else {
                                    if ((this.ServiceField == null)) {
                                        this.ServiceField = XTypedList<ServiceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Service", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<ServiceLocalType>(this.ServiceField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("Services", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<ServicesLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("Service", "http://www.opentravel.org/OTA/2003/05"), typeof(ServiceLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (DescriptiveText?)
                        /// </para>
                        /// </summary>
                        public partial class ServiceLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
         public static explicit operator ServiceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ServiceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static ServiceLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05")));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (DescriptiveText?)
                            /// </para>
                            /// </summary>
                            public ServiceLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (DescriptiveText?)
                            /// </para>
                            /// </summary>
                            public string DescriptiveText {
                                get {
                                    XElement x = this.GetElement(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetElement(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Code {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("Code", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string ID {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("ID", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("Service", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<ServiceLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (GuestRooms*)
                /// </para>
                /// </summary>
                public partial class FacilityInfoLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<GuestRoomsLocalType> GuestRoomsField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator FacilityInfoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FacilityInfoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static FacilityInfoLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GuestRooms", "http://www.opentravel.org/OTA/2003/05")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (GuestRooms*)
                    /// </para>
                    /// </summary>
                    public FacilityInfoLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (GuestRooms*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.FacilityInfoLocalType.GuestRoomsLocalType> GuestRooms {
                        get {
                            if ((this.GuestRoomsField == null)) {
                                this.GuestRoomsField = new XTypedList<GuestRoomsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("GuestRooms", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.GuestRoomsField;
                        }
                        set {
                            if ((value == null)) {
                                this.GuestRoomsField = null;
                            }
                            else {
                                if ((this.GuestRoomsField == null)) {
                                    this.GuestRoomsField = XTypedList<GuestRoomsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GuestRooms", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else {
                                    XTypedServices.SetList<GuestRoomsLocalType>(this.GuestRoomsField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("FacilityInfo", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<FacilityInfoLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("GuestRooms", "http://www.opentravel.org/OTA/2003/05"), typeof(GuestRoomsLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (GuestRoom*)
                    /// </para>
                    /// </summary>
                    public partial class GuestRoomsLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<GuestRoomLocalType> GuestRoomField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator GuestRoomsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<GuestRoomsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static GuestRoomsLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GuestRoom", "http://www.opentravel.org/OTA/2003/05")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (GuestRoom*)
                        /// </para>
                        /// </summary>
                        public GuestRoomsLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (GuestRoom*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.FacilityInfoLocalType.GuestRoomsLocalType.GuestRoomLocalType> GuestRoom {
                            get {
                                if ((this.GuestRoomField == null)) {
                                    this.GuestRoomField = new XTypedList<GuestRoomLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("GuestRoom", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.GuestRoomField;
                            }
                            set {
                                if ((value == null)) {
                                    this.GuestRoomField = null;
                                }
                                else {
                                    if ((this.GuestRoomField == null)) {
                                        this.GuestRoomField = XTypedList<GuestRoomLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GuestRoom", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<GuestRoomLocalType>(this.GuestRoomField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("GuestRooms", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<GuestRoomsLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("GuestRoom", "http://www.opentravel.org/OTA/2003/05"), typeof(GuestRoomLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (TypeRoom*, Amenities*, TPA_Extensions*, Features*)
                        /// </para>
                        /// </summary>
                        public partial class GuestRoomLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<TypeRoomLocalType> TypeRoomField;
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<AmenitiesLocalType> AmenitiesField;
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<TPA_Extensions> TPA_ExtensionsField;
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<FeaturesLocalType> FeaturesField;
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
         public static explicit operator GuestRoomLocalType(XElement xe) { return XTypedServices.ToXTypedElement<GuestRoomLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static GuestRoomLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TypeRoom", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Amenities", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Features", "http://www.opentravel.org/OTA/2003/05")));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (TypeRoom*, Amenities*, TPA_Extensions*, Features*)
                            /// </para>
                            /// </summary>
                            public GuestRoomLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (TypeRoom*, Amenities*, TPA_Extensions*, Features*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.FacilityInfoLocalType.GuestRoomsLocalType.GuestRoomLocalType.TypeRoomLocalType> TypeRoom {
                                get {
                                    if ((this.TypeRoomField == null)) {
                                        this.TypeRoomField = new XTypedList<TypeRoomLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("TypeRoom", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.TypeRoomField;
                                }
                                set {
                                    if ((value == null)) {
                                        this.TypeRoomField = null;
                                    }
                                    else {
                                        if ((this.TypeRoomField == null)) {
                                            this.TypeRoomField = XTypedList<TypeRoomLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TypeRoom", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else {
                                            XTypedServices.SetList<TypeRoomLocalType>(this.TypeRoomField, value);
                                        }
                                    }
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (TypeRoom*, Amenities*, TPA_Extensions*, Features*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.FacilityInfoLocalType.GuestRoomsLocalType.GuestRoomLocalType.AmenitiesLocalType> Amenities {
                                get {
                                    if ((this.AmenitiesField == null)) {
                                        this.AmenitiesField = new XTypedList<AmenitiesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Amenities", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.AmenitiesField;
                                }
                                set {
                                    if ((value == null)) {
                                        this.AmenitiesField = null;
                                    }
                                    else {
                                        if ((this.AmenitiesField == null)) {
                                            this.AmenitiesField = XTypedList<AmenitiesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Amenities", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else {
                                            XTypedServices.SetList<AmenitiesLocalType>(this.AmenitiesField, value);
                                        }
                                    }
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (TypeRoom*, Amenities*, TPA_Extensions*, Features*)
                            /// </para>
                            /// </summary>
                            public IList<TPA_Extensions> TPA_Extensions {
                                get {
                                    if ((this.TPA_ExtensionsField == null)) {
                                        this.TPA_ExtensionsField = new XTypedList<TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.TPA_ExtensionsField;
                                }
                                set {
                                    if ((value == null)) {
                                        this.TPA_ExtensionsField = null;
                                    }
                                    else {
                                        if ((this.TPA_ExtensionsField == null)) {
                                            this.TPA_ExtensionsField = XTypedList<TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else {
                                            XTypedServices.SetList<TPA_Extensions>(this.TPA_ExtensionsField, value);
                                        }
                                    }
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (TypeRoom*, Amenities*, TPA_Extensions*, Features*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.FacilityInfoLocalType.GuestRoomsLocalType.GuestRoomLocalType.FeaturesLocalType> Features {
                                get {
                                    if ((this.FeaturesField == null)) {
                                        this.FeaturesField = new XTypedList<FeaturesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Features", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.FeaturesField;
                                }
                                set {
                                    if ((value == null)) {
                                        this.FeaturesField = null;
                                    }
                                    else {
                                        if ((this.FeaturesField == null)) {
                                            this.FeaturesField = XTypedList<FeaturesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Features", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else {
                                            XTypedServices.SetList<FeaturesLocalType>(this.FeaturesField, value);
                                        }
                                    }
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string RoomTypeName {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("RoomTypeName", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("RoomTypeName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("GuestRoom", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<GuestRoomLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(XName.Get("TypeRoom", "http://www.opentravel.org/OTA/2003/05"), typeof(TypeRoomLocalType));
                                localElementDictionary.Add(XName.Get("Amenities", "http://www.opentravel.org/OTA/2003/05"), typeof(AmenitiesLocalType));
                                localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(TPA_Extensions));
                                localElementDictionary.Add(XName.Get("Features", "http://www.opentravel.org/OTA/2003/05"), typeof(FeaturesLocalType));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                            
                            public partial class TypeRoomLocalType : XTypedElement, IXMetaData {
                                
         public static explicit operator TypeRoomLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TypeRoomLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                
                                public TypeRoomLocalType() {
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string StandardOccupancy {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("StandardOccupancy", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("StandardOccupancy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string Size {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("Size", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("Size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string Name {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("Name", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string RoomTypeCode {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("RoomTypeCode", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("RoomTypeCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string Floor {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("Floor", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("Floor", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string InvBlockCode {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("InvBlockCode", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("InvBlockCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string BedTypeCode {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("BedTypeCode", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("BedTypeCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string NonSmoking {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("NonSmoking", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("NonSmoking", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string HasWindow {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("HasWindow", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("HasWindow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string Quantity {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("Quantity", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("Quantity", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string RoomSize {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("RoomSize", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("RoomSize", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName {
                                    get {
                                        return XName.Get("TypeRoom", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin {
                                    get {
                                        return SchemaOrigin.Fragment;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager {
                                    get {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }
                                
                                public override XTypedElement Clone() {
                                    return XTypedServices.CloneXTypedElement<TypeRoomLocalType>(this);
                                }
                                
                                ContentModelEntity IXMetaData.GetContentModel() {
                                    return ContentModelEntity.Default;
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (Amenity*)
                            /// </para>
                            /// </summary>
                            public partial class AmenitiesLocalType : XTypedElement, IXMetaData {
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<AmenityLocalType> AmenityField;
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;
                                
         public static explicit operator AmenitiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AmenitiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                
                                static AmenitiesLocalType() {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Amenity", "http://www.opentravel.org/OTA/2003/05")));
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (Amenity*)
                                /// </para>
                                /// </summary>
                                public AmenitiesLocalType() {
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (Amenity*)
                                /// </para>
                                /// </summary>
                                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.FacilityInfoLocalType.GuestRoomsLocalType.GuestRoomLocalType.AmenitiesLocalType.AmenityLocalType> Amenity {
                                    get {
                                        if ((this.AmenityField == null)) {
                                            this.AmenityField = new XTypedList<AmenityLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Amenity", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.AmenityField;
                                    }
                                    set {
                                        if ((value == null)) {
                                            this.AmenityField = null;
                                        }
                                        else {
                                            if ((this.AmenityField == null)) {
                                                this.AmenityField = XTypedList<AmenityLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Amenity", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else {
                                                XTypedServices.SetList<AmenityLocalType>(this.AmenityField, value);
                                            }
                                        }
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                    get {
                                        return localElementDictionary;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName {
                                    get {
                                        return XName.Get("Amenities", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin {
                                    get {
                                        return SchemaOrigin.Fragment;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager {
                                    get {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }
                                
                                public override XTypedElement Clone() {
                                    return XTypedServices.CloneXTypedElement<AmenitiesLocalType>(this);
                                }
                                
                                private static void BuildElementDictionary() {
                                    localElementDictionary.Add(XName.Get("Amenity", "http://www.opentravel.org/OTA/2003/05"), typeof(AmenityLocalType));
                                }
                                
                                ContentModelEntity IXMetaData.GetContentModel() {
                                    return contentModel;
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (DescriptiveText?)
                                /// </para>
                                /// </summary>
                                public partial class AmenityLocalType : XTypedElement, IXMetaData {
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;
                                    
         public static explicit operator AmenityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AmenityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                    
                                    static AmenityLocalType() {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05")));
                                    }
                                    
                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (DescriptiveText?)
                                    /// </para>
                                    /// </summary>
                                    public AmenityLocalType() {
                                    }
                                    
                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (DescriptiveText?)
                                    /// </para>
                                    /// </summary>
                                    public string DescriptiveText {
                                        get {
                                            XElement x = this.GetElement(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set {
                                            this.SetElement(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }
                                    
                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// </summary>
                                    public string RoomAmenityCode {
                                        get {
                                            XAttribute x = this.Attribute(XName.Get("RoomAmenityCode", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set {
                                            this.SetAttribute(XName.Get("RoomAmenityCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                        get {
                                            return localElementDictionary;
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName {
                                        get {
                                            return XName.Get("Amenity", "http://www.opentravel.org/OTA/2003/05");
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin {
                                        get {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                                        get {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }
                                    
                                    public override XTypedElement Clone() {
                                        return XTypedServices.CloneXTypedElement<AmenityLocalType>(this);
                                    }
                                    
                                    private static void BuildElementDictionary() {
                                        localElementDictionary.Add(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                                    }
                                    
                                    ContentModelEntity IXMetaData.GetContentModel() {
                                        return contentModel;
                                    }
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (Feature*)
                            /// </para>
                            /// </summary>
                            public partial class FeaturesLocalType : XTypedElement, IXMetaData {
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<FeatureLocalType> FeatureField;
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;
                                
         public static explicit operator FeaturesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FeaturesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                
                                static FeaturesLocalType() {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Feature", "http://www.opentravel.org/OTA/2003/05")));
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (Feature*)
                                /// </para>
                                /// </summary>
                                public FeaturesLocalType() {
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (Feature*)
                                /// </para>
                                /// </summary>
                                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.FacilityInfoLocalType.GuestRoomsLocalType.GuestRoomLocalType.FeaturesLocalType.FeatureLocalType> Feature {
                                    get {
                                        if ((this.FeatureField == null)) {
                                            this.FeatureField = new XTypedList<FeatureLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Feature", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.FeatureField;
                                    }
                                    set {
                                        if ((value == null)) {
                                            this.FeatureField = null;
                                        }
                                        else {
                                            if ((this.FeatureField == null)) {
                                                this.FeatureField = XTypedList<FeatureLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Feature", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else {
                                                XTypedServices.SetList<FeatureLocalType>(this.FeatureField, value);
                                            }
                                        }
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                    get {
                                        return localElementDictionary;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName {
                                    get {
                                        return XName.Get("Features", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin {
                                    get {
                                        return SchemaOrigin.Fragment;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager {
                                    get {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }
                                
                                public override XTypedElement Clone() {
                                    return XTypedServices.CloneXTypedElement<FeaturesLocalType>(this);
                                }
                                
                                private static void BuildElementDictionary() {
                                    localElementDictionary.Add(XName.Get("Feature", "http://www.opentravel.org/OTA/2003/05"), typeof(FeatureLocalType));
                                }
                                
                                ContentModelEntity IXMetaData.GetContentModel() {
                                    return contentModel;
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (DescriptiveText?)
                                /// </para>
                                /// </summary>
                                public partial class FeatureLocalType : XTypedElement, IXMetaData {
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;
                                    
         public static explicit operator FeatureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FeatureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                    
                                    static FeatureLocalType() {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05")));
                                    }
                                    
                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (DescriptiveText?)
                                    /// </para>
                                    /// </summary>
                                    public FeatureLocalType() {
                                    }
                                    
                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (DescriptiveText?)
                                    /// </para>
                                    /// </summary>
                                    public string DescriptiveText {
                                        get {
                                            XElement x = this.GetElement(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set {
                                            this.SetElement(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                        get {
                                            return localElementDictionary;
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName {
                                        get {
                                            return XName.Get("Feature", "http://www.opentravel.org/OTA/2003/05");
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin {
                                        get {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                                        get {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }
                                    
                                    public override XTypedElement Clone() {
                                        return XTypedServices.CloneXTypedElement<FeatureLocalType>(this);
                                    }
                                    
                                    private static void BuildElementDictionary() {
                                        localElementDictionary.Add(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                                    }
                                    
                                    ContentModelEntity IXMetaData.GetContentModel() {
                                        return contentModel;
                                    }
                                }
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Policy*)
                /// </para>
                /// </summary>
                public partial class PoliciesLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<PolicyLocalType> PolicyField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator PoliciesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PoliciesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static PoliciesLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Policy", "http://www.opentravel.org/OTA/2003/05")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Policy*)
                    /// </para>
                    /// </summary>
                    public PoliciesLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (Policy*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.PoliciesLocalType.PolicyLocalType> Policy {
                        get {
                            if ((this.PolicyField == null)) {
                                this.PolicyField = new XTypedList<PolicyLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Policy", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.PolicyField;
                        }
                        set {
                            if ((value == null)) {
                                this.PolicyField = null;
                            }
                            else {
                                if ((this.PolicyField == null)) {
                                    this.PolicyField = XTypedList<PolicyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Policy", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else {
                                    XTypedServices.SetList<PolicyLocalType>(this.PolicyField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("Policies", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<PoliciesLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("Policy", "http://www.opentravel.org/OTA/2003/05"), typeof(PolicyLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (PolicyInfoCodes*, PolicyInfo*)
                    /// </para>
                    /// </summary>
                    public partial class PolicyLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<PolicyInfoCodesLocalType> PolicyInfoCodesField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<PolicyInfoLocalType> PolicyInfoField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator PolicyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PolicyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static PolicyLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PolicyInfoCodes", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("PolicyInfo", "http://www.opentravel.org/OTA/2003/05")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (PolicyInfoCodes*, PolicyInfo*)
                        /// </para>
                        /// </summary>
                        public PolicyLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (PolicyInfoCodes*, PolicyInfo*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.PoliciesLocalType.PolicyLocalType.PolicyInfoCodesLocalType> PolicyInfoCodes {
                            get {
                                if ((this.PolicyInfoCodesField == null)) {
                                    this.PolicyInfoCodesField = new XTypedList<PolicyInfoCodesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("PolicyInfoCodes", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.PolicyInfoCodesField;
                            }
                            set {
                                if ((value == null)) {
                                    this.PolicyInfoCodesField = null;
                                }
                                else {
                                    if ((this.PolicyInfoCodesField == null)) {
                                        this.PolicyInfoCodesField = XTypedList<PolicyInfoCodesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PolicyInfoCodes", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<PolicyInfoCodesLocalType>(this.PolicyInfoCodesField, value);
                                    }
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (PolicyInfoCodes*, PolicyInfo*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.PoliciesLocalType.PolicyLocalType.PolicyInfoLocalType> PolicyInfo {
                            get {
                                if ((this.PolicyInfoField == null)) {
                                    this.PolicyInfoField = new XTypedList<PolicyInfoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("PolicyInfo", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.PolicyInfoField;
                            }
                            set {
                                if ((value == null)) {
                                    this.PolicyInfoField = null;
                                }
                                else {
                                    if ((this.PolicyInfoField == null)) {
                                        this.PolicyInfoField = XTypedList<PolicyInfoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PolicyInfo", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<PolicyInfoLocalType>(this.PolicyInfoField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("Policy", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<PolicyLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("PolicyInfoCodes", "http://www.opentravel.org/OTA/2003/05"), typeof(PolicyInfoCodesLocalType));
                            localElementDictionary.Add(XName.Get("PolicyInfo", "http://www.opentravel.org/OTA/2003/05"), typeof(PolicyInfoLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (PolicyInfoCode*)
                        /// </para>
                        /// </summary>
                        public partial class PolicyInfoCodesLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<PolicyInfoCodeLocalType> PolicyInfoCodeField;
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
         public static explicit operator PolicyInfoCodesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PolicyInfoCodesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static PolicyInfoCodesLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PolicyInfoCode", "http://www.opentravel.org/OTA/2003/05")));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (PolicyInfoCode*)
                            /// </para>
                            /// </summary>
                            public PolicyInfoCodesLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (PolicyInfoCode*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.PoliciesLocalType.PolicyLocalType.PolicyInfoCodesLocalType.PolicyInfoCodeLocalType> PolicyInfoCode {
                                get {
                                    if ((this.PolicyInfoCodeField == null)) {
                                        this.PolicyInfoCodeField = new XTypedList<PolicyInfoCodeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("PolicyInfoCode", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.PolicyInfoCodeField;
                                }
                                set {
                                    if ((value == null)) {
                                        this.PolicyInfoCodeField = null;
                                    }
                                    else {
                                        if ((this.PolicyInfoCodeField == null)) {
                                            this.PolicyInfoCodeField = XTypedList<PolicyInfoCodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PolicyInfoCode", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else {
                                            XTypedServices.SetList<PolicyInfoCodeLocalType>(this.PolicyInfoCodeField, value);
                                        }
                                    }
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("PolicyInfoCodes", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<PolicyInfoCodesLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(XName.Get("PolicyInfoCode", "http://www.opentravel.org/OTA/2003/05"), typeof(PolicyInfoCodeLocalType));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (Description*)
                            /// </para>
                            /// </summary>
                            public partial class PolicyInfoCodeLocalType : XTypedElement, IXMetaData {
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<Description> DescriptionField;
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;
                                
         public static explicit operator PolicyInfoCodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PolicyInfoCodeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                
                                static PolicyInfoCodeLocalType() {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05")));
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (Description*)
                                /// </para>
                                /// </summary>
                                public PolicyInfoCodeLocalType() {
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (Description*)
                                /// </para>
                                /// </summary>
                                public IList<Description> Description {
                                    get {
                                        if ((this.DescriptionField == null)) {
                                            this.DescriptionField = new XTypedList<Description>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.DescriptionField;
                                    }
                                    set {
                                        if ((value == null)) {
                                            this.DescriptionField = null;
                                        }
                                        else {
                                            if ((this.DescriptionField == null)) {
                                                this.DescriptionField = XTypedList<Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else {
                                                XTypedServices.SetList<Description>(this.DescriptionField, value);
                                            }
                                        }
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string Code {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("Code", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                    get {
                                        return localElementDictionary;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName {
                                    get {
                                        return XName.Get("PolicyInfoCode", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin {
                                    get {
                                        return SchemaOrigin.Fragment;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager {
                                    get {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }
                                
                                public override XTypedElement Clone() {
                                    return XTypedServices.CloneXTypedElement<PolicyInfoCodeLocalType>(this);
                                }
                                
                                private static void BuildElementDictionary() {
                                    localElementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(Description));
                                }
                                
                                ContentModelEntity IXMetaData.GetContentModel() {
                                    return contentModel;
                                }
                            }
                        }
                        
                        public partial class PolicyInfoLocalType : XTypedElement, IXMetaData {
                            
         public static explicit operator PolicyInfoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PolicyInfoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            public PolicyInfoLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string CheckInTime {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("CheckInTime", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("CheckInTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string CheckOutTime {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("CheckOutTime", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("CheckOutTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("PolicyInfo", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<PolicyInfoLocalType>(this);
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return ContentModelEntity.Default;
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (RefPoints*)
                /// </para>
                /// </summary>
                public partial class AreaInfoLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<RefPointsLocalType> RefPointsField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator AreaInfoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AreaInfoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static AreaInfoLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RefPoints", "http://www.opentravel.org/OTA/2003/05")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (RefPoints*)
                    /// </para>
                    /// </summary>
                    public AreaInfoLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (RefPoints*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.AreaInfoLocalType.RefPointsLocalType> RefPoints {
                        get {
                            if ((this.RefPointsField == null)) {
                                this.RefPointsField = new XTypedList<RefPointsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("RefPoints", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.RefPointsField;
                        }
                        set {
                            if ((value == null)) {
                                this.RefPointsField = null;
                            }
                            else {
                                if ((this.RefPointsField == null)) {
                                    this.RefPointsField = XTypedList<RefPointsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RefPoints", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else {
                                    XTypedServices.SetList<RefPointsLocalType>(this.RefPointsField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("AreaInfo", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<AreaInfoLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("RefPoints", "http://www.opentravel.org/OTA/2003/05"), typeof(RefPointsLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (RefPoint*)
                    /// </para>
                    /// </summary>
                    public partial class RefPointsLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<RefPointLocalType> RefPointField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator RefPointsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RefPointsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static RefPointsLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RefPoint", "http://www.opentravel.org/OTA/2003/05")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (RefPoint*)
                        /// </para>
                        /// </summary>
                        public RefPointsLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (RefPoint*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.AreaInfoLocalType.RefPointsLocalType.RefPointLocalType> RefPoint {
                            get {
                                if ((this.RefPointField == null)) {
                                    this.RefPointField = new XTypedList<RefPointLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("RefPoint", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.RefPointField;
                            }
                            set {
                                if ((value == null)) {
                                    this.RefPointField = null;
                                }
                                else {
                                    if ((this.RefPointField == null)) {
                                        this.RefPointField = XTypedList<RefPointLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RefPoint", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<RefPointLocalType>(this.RefPointField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("RefPoints", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<RefPointsLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("RefPoint", "http://www.opentravel.org/OTA/2003/05"), typeof(RefPointLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (DescriptiveText?)
                        /// </para>
                        /// </summary>
                        public partial class RefPointLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
         public static explicit operator RefPointLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RefPointLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static RefPointLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05")));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (DescriptiveText?)
                            /// </para>
                            /// </summary>
                            public RefPointLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (DescriptiveText?)
                            /// </para>
                            /// </summary>
                            public string DescriptiveText {
                                get {
                                    XElement x = this.GetElement(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetElement(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Distance {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("Distance", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("Distance", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string UnitOfMeasureCode {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("UnitOfMeasureCode", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("UnitOfMeasureCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Name {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("Name", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Latitude {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("Latitude", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("Latitude", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Longitude {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("Longitude", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("Longitude", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string RefPointCategoryCode {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("RefPointCategoryCode", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("RefPointCategoryCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string RefPointName {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("RefPointName", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("RefPointName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("RefPoint", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<RefPointLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(XName.Get("DescriptiveText", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Awards*)
                /// </para>
                /// </summary>
                public partial class AffiliationInfoLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<AwardsLocalType> AwardsField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator AffiliationInfoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AffiliationInfoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static AffiliationInfoLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Awards", "http://www.opentravel.org/OTA/2003/05")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Awards*)
                    /// </para>
                    /// </summary>
                    public AffiliationInfoLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (Awards*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.AffiliationInfoLocalType.AwardsLocalType> Awards {
                        get {
                            if ((this.AwardsField == null)) {
                                this.AwardsField = new XTypedList<AwardsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Awards", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.AwardsField;
                        }
                        set {
                            if ((value == null)) {
                                this.AwardsField = null;
                            }
                            else {
                                if ((this.AwardsField == null)) {
                                    this.AwardsField = XTypedList<AwardsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Awards", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else {
                                    XTypedServices.SetList<AwardsLocalType>(this.AwardsField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("AffiliationInfo", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<AffiliationInfoLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("Awards", "http://www.opentravel.org/OTA/2003/05"), typeof(AwardsLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Award*)
                    /// </para>
                    /// </summary>
                    public partial class AwardsLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<AwardLocalType> AwardField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator AwardsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AwardsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static AwardsLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Award", "http://www.opentravel.org/OTA/2003/05")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (Award*)
                        /// </para>
                        /// </summary>
                        public AwardsLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (Award*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.AffiliationInfoLocalType.AwardsLocalType.AwardLocalType> Award {
                            get {
                                if ((this.AwardField == null)) {
                                    this.AwardField = new XTypedList<AwardLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Award", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.AwardField;
                            }
                            set {
                                if ((value == null)) {
                                    this.AwardField = null;
                                }
                                else {
                                    if ((this.AwardField == null)) {
                                        this.AwardField = XTypedList<AwardLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Award", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<AwardLocalType>(this.AwardField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("Awards", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<AwardsLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("Award", "http://www.opentravel.org/OTA/2003/05"), typeof(AwardLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        public partial class AwardLocalType : XTypedElement, IXMetaData {
                            
         public static explicit operator AwardLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AwardLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            public AwardLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Provider {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("Provider", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("Provider", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Rating {
                                get {
                                    XAttribute x = this.Attribute(XName.Get("Rating", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set {
                                    this.SetAttribute(XName.Get("Rating", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("Award", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<AwardLocalType>(this);
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return ContentModelEntity.Default;
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (MultimediaDescription*)
                /// </para>
                /// </summary>
                public partial class MultimediaDescriptionsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<MultimediaDescriptionLocalType> MultimediaDescriptionField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator MultimediaDescriptionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MultimediaDescriptionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static MultimediaDescriptionsLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MultimediaDescription", "http://www.opentravel.org/OTA/2003/05")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (MultimediaDescription*)
                    /// </para>
                    /// </summary>
                    public MultimediaDescriptionsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (MultimediaDescription*)
                    /// </para>
                    /// </summary>
                    public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.MultimediaDescriptionsLocalType.MultimediaDescriptionLocalType> MultimediaDescription {
                        get {
                            if ((this.MultimediaDescriptionField == null)) {
                                this.MultimediaDescriptionField = new XTypedList<MultimediaDescriptionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("MultimediaDescription", "http://www.opentravel.org/OTA/2003/05"));
                            }
                            return this.MultimediaDescriptionField;
                        }
                        set {
                            if ((value == null)) {
                                this.MultimediaDescriptionField = null;
                            }
                            else {
                                if ((this.MultimediaDescriptionField == null)) {
                                    this.MultimediaDescriptionField = XTypedList<MultimediaDescriptionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MultimediaDescription", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                else {
                                    XTypedServices.SetList<MultimediaDescriptionLocalType>(this.MultimediaDescriptionField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("MultimediaDescriptions", "http://www.opentravel.org/OTA/2003/05");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<MultimediaDescriptionsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("MultimediaDescription", "http://www.opentravel.org/OTA/2003/05"), typeof(MultimediaDescriptionLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (TextItems*, ImageItems*)
                    /// </para>
                    /// </summary>
                    public partial class MultimediaDescriptionLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<TextItemsLocalType> TextItemsField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<ImageItemsLocalType> ImageItemsField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator MultimediaDescriptionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MultimediaDescriptionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static MultimediaDescriptionLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextItems", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("ImageItems", "http://www.opentravel.org/OTA/2003/05")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (TextItems*, ImageItems*)
                        /// </para>
                        /// </summary>
                        public MultimediaDescriptionLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (TextItems*, ImageItems*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.MultimediaDescriptionsLocalType.MultimediaDescriptionLocalType.TextItemsLocalType> TextItems {
                            get {
                                if ((this.TextItemsField == null)) {
                                    this.TextItemsField = new XTypedList<TextItemsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("TextItems", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.TextItemsField;
                            }
                            set {
                                if ((value == null)) {
                                    this.TextItemsField = null;
                                }
                                else {
                                    if ((this.TextItemsField == null)) {
                                        this.TextItemsField = XTypedList<TextItemsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TextItems", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<TextItemsLocalType>(this.TextItemsField, value);
                                    }
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (TextItems*, ImageItems*)
                        /// </para>
                        /// </summary>
                        public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.MultimediaDescriptionsLocalType.MultimediaDescriptionLocalType.ImageItemsLocalType> ImageItems {
                            get {
                                if ((this.ImageItemsField == null)) {
                                    this.ImageItemsField = new XTypedList<ImageItemsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ImageItems", "http://www.opentravel.org/OTA/2003/05"));
                                }
                                return this.ImageItemsField;
                            }
                            set {
                                if ((value == null)) {
                                    this.ImageItemsField = null;
                                }
                                else {
                                    if ((this.ImageItemsField == null)) {
                                        this.ImageItemsField = XTypedList<ImageItemsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ImageItems", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    else {
                                        XTypedServices.SetList<ImageItemsLocalType>(this.ImageItemsField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("MultimediaDescription", "http://www.opentravel.org/OTA/2003/05");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<MultimediaDescriptionLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("TextItems", "http://www.opentravel.org/OTA/2003/05"), typeof(TextItemsLocalType));
                            localElementDictionary.Add(XName.Get("ImageItems", "http://www.opentravel.org/OTA/2003/05"), typeof(ImageItemsLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (TextItem*)
                        /// </para>
                        /// </summary>
                        public partial class TextItemsLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<TextItemLocalType> TextItemField;
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
         public static explicit operator TextItemsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TextItemsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static TextItemsLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextItem", "http://www.opentravel.org/OTA/2003/05")));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (TextItem*)
                            /// </para>
                            /// </summary>
                            public TextItemsLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (TextItem*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.MultimediaDescriptionsLocalType.MultimediaDescriptionLocalType.TextItemsLocalType.TextItemLocalType> TextItem {
                                get {
                                    if ((this.TextItemField == null)) {
                                        this.TextItemField = new XTypedList<TextItemLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("TextItem", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.TextItemField;
                                }
                                set {
                                    if ((value == null)) {
                                        this.TextItemField = null;
                                    }
                                    else {
                                        if ((this.TextItemField == null)) {
                                            this.TextItemField = XTypedList<TextItemLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TextItem", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else {
                                            XTypedServices.SetList<TextItemLocalType>(this.TextItemField, value);
                                        }
                                    }
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("TextItems", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<TextItemsLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(XName.Get("TextItem", "http://www.opentravel.org/OTA/2003/05"), typeof(TextItemLocalType));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (URL?, Description?)
                            /// </para>
                            /// </summary>
                            public partial class TextItemLocalType : XTypedElement, IXMetaData {
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;
                                
         public static explicit operator TextItemLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TextItemLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                
                                static TextItemLocalType() {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URL", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05")));
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (URL?, Description?)
                                /// </para>
                                /// </summary>
                                public TextItemLocalType() {
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (URL?, Description?)
                                /// </para>
                                /// </summary>
                                public string URL {
                                    get {
                                        XElement x = this.GetElement(XName.Get("URL", "http://www.opentravel.org/OTA/2003/05"));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetElement(XName.Get("URL", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (URL?, Description?)
                                /// </para>
                                /// </summary>
                                public string Description {
                                    get {
                                        XElement x = this.GetElement(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetElement(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string Category {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("Category", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("Category", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                    get {
                                        return localElementDictionary;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName {
                                    get {
                                        return XName.Get("TextItem", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin {
                                    get {
                                        return SchemaOrigin.Fragment;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager {
                                    get {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }
                                
                                public override XTypedElement Clone() {
                                    return XTypedServices.CloneXTypedElement<TextItemLocalType>(this);
                                }
                                
                                private static void BuildElementDictionary() {
                                    localElementDictionary.Add(XName.Get("URL", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                                    localElementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                                }
                                
                                ContentModelEntity IXMetaData.GetContentModel() {
                                    return contentModel;
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ImageItem*)
                        /// </para>
                        /// </summary>
                        public partial class ImageItemsLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<ImageItemLocalType> ImageItemField;
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
         public static explicit operator ImageItemsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ImageItemsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static ImageItemsLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ImageItem", "http://www.opentravel.org/OTA/2003/05")));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (ImageItem*)
                            /// </para>
                            /// </summary>
                            public ImageItemsLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (ImageItem*)
                            /// </para>
                            /// </summary>
                            public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.MultimediaDescriptionsLocalType.MultimediaDescriptionLocalType.ImageItemsLocalType.ImageItemLocalType> ImageItem {
                                get {
                                    if ((this.ImageItemField == null)) {
                                        this.ImageItemField = new XTypedList<ImageItemLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ImageItem", "http://www.opentravel.org/OTA/2003/05"));
                                    }
                                    return this.ImageItemField;
                                }
                                set {
                                    if ((value == null)) {
                                        this.ImageItemField = null;
                                    }
                                    else {
                                        if ((this.ImageItemField == null)) {
                                            this.ImageItemField = XTypedList<ImageItemLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ImageItem", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        else {
                                            XTypedServices.SetList<ImageItemLocalType>(this.ImageItemField, value);
                                        }
                                    }
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName {
                                get {
                                    return XName.Get("ImageItems", "http://www.opentravel.org/OTA/2003/05");
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<ImageItemsLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(XName.Get("ImageItem", "http://www.opentravel.org/OTA/2003/05"), typeof(ImageItemLocalType));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (ImageFormat*, Description*, TPA_Extensions*)
                            /// </para>
                            /// </summary>
                            public partial class ImageItemLocalType : XTypedElement, IXMetaData {
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<ImageFormatLocalType> ImageFormatField;
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<Description> DescriptionField;
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private XTypedList<TPA_Extensions> TPA_ExtensionsField;
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;
                                
         public static explicit operator ImageItemLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ImageItemLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                
                                static ImageItemLocalType() {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ImageFormat", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05")), new NamedContentModelEntity(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05")));
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (ImageFormat*, Description*, TPA_Extensions*)
                                /// </para>
                                /// </summary>
                                public ImageItemLocalType() {
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (ImageFormat*, Description*, TPA_Extensions*)
                                /// </para>
                                /// </summary>
                                public IList<www.opentravel.org.OTA.Item2003.Item05.OTA_HotelDescriptiveInfoRS.HotelDescriptiveContentsLocalType.HotelDescriptiveContentLocalType.MultimediaDescriptionsLocalType.MultimediaDescriptionLocalType.ImageItemsLocalType.ImageItemLocalType.ImageFormatLocalType> ImageFormat {
                                    get {
                                        if ((this.ImageFormatField == null)) {
                                            this.ImageFormatField = new XTypedList<ImageFormatLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ImageFormat", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.ImageFormatField;
                                    }
                                    set {
                                        if ((value == null)) {
                                            this.ImageFormatField = null;
                                        }
                                        else {
                                            if ((this.ImageFormatField == null)) {
                                                this.ImageFormatField = XTypedList<ImageFormatLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ImageFormat", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else {
                                                XTypedServices.SetList<ImageFormatLocalType>(this.ImageFormatField, value);
                                            }
                                        }
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (ImageFormat*, Description*, TPA_Extensions*)
                                /// </para>
                                /// </summary>
                                public IList<Description> Description {
                                    get {
                                        if ((this.DescriptionField == null)) {
                                            this.DescriptionField = new XTypedList<Description>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.DescriptionField;
                                    }
                                    set {
                                        if ((value == null)) {
                                            this.DescriptionField = null;
                                        }
                                        else {
                                            if ((this.DescriptionField == null)) {
                                                this.DescriptionField = XTypedList<Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else {
                                                XTypedServices.SetList<Description>(this.DescriptionField, value);
                                            }
                                        }
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional, repeating
                                /// </para>
                                /// <para>
                                /// Regular expression: (ImageFormat*, Description*, TPA_Extensions*)
                                /// </para>
                                /// </summary>
                                public IList<TPA_Extensions> TPA_Extensions {
                                    get {
                                        if ((this.TPA_ExtensionsField == null)) {
                                            this.TPA_ExtensionsField = new XTypedList<TPA_Extensions>(this, LinqToXsdTypeManager.Instance, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                        }
                                        return this.TPA_ExtensionsField;
                                    }
                                    set {
                                        if ((value == null)) {
                                            this.TPA_ExtensionsField = null;
                                        }
                                        else {
                                            if ((this.TPA_ExtensionsField == null)) {
                                                this.TPA_ExtensionsField = XTypedList<TPA_Extensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"));
                                            }
                                            else {
                                                XTypedServices.SetList<TPA_Extensions>(this.TPA_ExtensionsField, value);
                                            }
                                        }
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// </summary>
                                public string Category {
                                    get {
                                        XAttribute x = this.Attribute(XName.Get("Category", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set {
                                        this.SetAttribute(XName.Get("Category", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                    get {
                                        return localElementDictionary;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName {
                                    get {
                                        return XName.Get("ImageItem", "http://www.opentravel.org/OTA/2003/05");
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin {
                                    get {
                                        return SchemaOrigin.Fragment;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager {
                                    get {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }
                                
                                public override XTypedElement Clone() {
                                    return XTypedServices.CloneXTypedElement<ImageItemLocalType>(this);
                                }
                                
                                private static void BuildElementDictionary() {
                                    localElementDictionary.Add(XName.Get("ImageFormat", "http://www.opentravel.org/OTA/2003/05"), typeof(ImageFormatLocalType));
                                    localElementDictionary.Add(XName.Get("Description", "http://www.opentravel.org/OTA/2003/05"), typeof(Description));
                                    localElementDictionary.Add(XName.Get("TPA_Extensions", "http://www.opentravel.org/OTA/2003/05"), typeof(TPA_Extensions));
                                }
                                
                                ContentModelEntity IXMetaData.GetContentModel() {
                                    return contentModel;
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (URL?)
                                /// </para>
                                /// </summary>
                                public partial class ImageFormatLocalType : XTypedElement, IXMetaData {
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;
                                    
         public static explicit operator ImageFormatLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ImageFormatLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                    
                                    static ImageFormatLocalType() {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URL", "http://www.opentravel.org/OTA/2003/05")));
                                    }
                                    
                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (URL?)
                                    /// </para>
                                    /// </summary>
                                    public ImageFormatLocalType() {
                                    }
                                    
                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: optional
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (URL?)
                                    /// </para>
                                    /// </summary>
                                    public string URL {
                                        get {
                                            XElement x = this.GetElement(XName.Get("URL", "http://www.opentravel.org/OTA/2003/05"));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set {
                                            this.SetElement(XName.Get("URL", "http://www.opentravel.org/OTA/2003/05"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                                        get {
                                            return localElementDictionary;
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName {
                                        get {
                                            return XName.Get("ImageFormat", "http://www.opentravel.org/OTA/2003/05");
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin {
                                        get {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }
                                    
                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                                        get {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }
                                    
                                    public override XTypedElement Clone() {
                                        return XTypedServices.CloneXTypedElement<ImageFormatLocalType>(this);
                                    }
                                    
                                    private static void BuildElementDictionary() {
                                        localElementDictionary.Add(XName.Get("URL", "http://www.opentravel.org/OTA/2003/05"), typeof(string));
                                    }
                                    
                                    ContentModelEntity IXMetaData.GetContentModel() {
                                        return contentModel;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public TPA_Extensions TPA_Extensions {  get {return rootObject as TPA_Extensions; } }

    public Description Description {  get {return rootObject as Description; } }

    public OTA_HotelDescriptiveInfoRS OTA_HotelDescriptiveInfoRS {  get {return rootObject as OTA_HotelDescriptiveInfoRS; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(TPA_Extensions root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Description root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OTA_HotelDescriptiveInfoRS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
